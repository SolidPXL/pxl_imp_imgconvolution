// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2d_edge_conv2d_edge,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.840000,HLS_SYN_LAT=65555,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=2455,HLS_SYN_LUT=2488,HLS_VERSION=2024_1}" *)

module conv2d_edge (
        ap_clk,
        ap_rst_n,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM1_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM1_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM1_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_AWADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_AWID;
output  [7:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [C_M_AXI_GMEM1_AWUSER_WIDTH - 1:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_WDATA;
output  [C_M_AXI_GMEM1_WSTRB_WIDTH - 1:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_WID;
output  [C_M_AXI_GMEM1_WUSER_WIDTH - 1:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_ARADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_ARID;
output  [7:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [C_M_AXI_GMEM1_ARUSER_WIDTH - 1:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_RID;
input  [C_M_AXI_GMEM1_RUSER_WIDTH - 1:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_BID;
input  [C_M_AXI_GMEM1_BUSER_WIDTH - 1:0] m_axi_gmem1_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_ready;
wire    gmem0_AWREADY;
wire    gmem0_WREADY;
reg    gmem0_ARVALID;
wire    gmem0_ARREADY;
wire   [31:0] gmem0_ARLEN;
wire    gmem0_RVALID;
reg    gmem0_RREADY;
wire   [7:0] gmem0_RDATA;
wire   [10:0] gmem0_RFIFONUM;
wire    gmem0_BVALID;
reg   [0:0] first_iter_0_reg_263;
reg    ap_block_state2_io;
reg    ap_block_state10_pp0_stage0_iter9;
reg    gmem1_AWVALID;
wire    gmem1_AWREADY;
wire   [31:0] gmem1_AWLEN;
reg    gmem1_WVALID;
wire    gmem1_WREADY;
wire    gmem1_ARREADY;
wire    gmem1_RVALID;
wire   [7:0] gmem1_RDATA;
wire   [10:0] gmem1_RFIFONUM;
wire    gmem1_BVALID;
reg    gmem1_BREADY;
reg   [0:0] first_iter_0_reg_263_pp0_iter11_reg;
reg    ap_block_state13_io;
reg   [0:0] and_ln42_reg_640;
reg   [0:0] and_ln42_reg_640_pp0_iter12_reg;
reg    ap_block_state14_io;
reg   [0:0] icmp_ln32_reg_608;
reg   [0:0] icmp_ln32_reg_608_pp0_iter17_reg;
reg    ap_block_state19_pp0_stage0_iter18;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln32_fu_318_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg    ap_loop_exit_ready_delayed;
wire   [63:0] input_r;
wire   [63:0] output_r;
reg    gmem0_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem0_blk_n_R;
reg    gmem1_blk_n_AW;
reg    gmem1_blk_n_W;
reg    gmem1_blk_n_B;
reg   [0:0] first_iter_0_reg_263_pp0_iter1_reg;
reg   [0:0] first_iter_0_reg_263_pp0_iter2_reg;
reg   [0:0] first_iter_0_reg_263_pp0_iter3_reg;
reg   [0:0] first_iter_0_reg_263_pp0_iter4_reg;
reg   [0:0] first_iter_0_reg_263_pp0_iter5_reg;
reg   [0:0] first_iter_0_reg_263_pp0_iter6_reg;
reg   [0:0] first_iter_0_reg_263_pp0_iter7_reg;
reg   [0:0] first_iter_0_reg_263_pp0_iter8_reg;
reg   [0:0] first_iter_0_reg_263_pp0_iter9_reg;
reg   [0:0] first_iter_0_reg_263_pp0_iter10_reg;
reg   [63:0] output_r_read_reg_598;
reg   [63:0] output_r_read_reg_598_pp0_iter1_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter2_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter3_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter4_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter5_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter6_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter7_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter8_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter9_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter10_reg;
reg   [63:0] output_r_read_reg_598_pp0_iter11_reg;
reg   [63:0] input_r_read_reg_603;
reg   [0:0] icmp_ln32_reg_608_pp0_iter1_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter2_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter3_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter4_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter5_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter6_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter7_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter8_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter9_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter10_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter11_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter12_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter13_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter14_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter15_reg;
reg   [0:0] icmp_ln32_reg_608_pp0_iter16_reg;
wire   [63:0] zext_ln33_fu_376_p1;
reg   [63:0] zext_ln33_reg_618;
reg   [63:0] zext_ln33_reg_618_pp0_iter2_reg;
wire   [7:0] trunc_ln33_fu_382_p1;
reg   [7:0] trunc_ln33_reg_623;
reg   [7:0] linebuf_1_addr_reg_628;
reg   [7:0] linebuf_1_addr_reg_628_pp0_iter2_reg;
reg   [7:0] linebuf_2_addr_reg_634;
reg   [7:0] linebuf_2_addr_reg_634_pp0_iter2_reg;
reg   [7:0] linebuf_2_addr_reg_634_pp0_iter3_reg;
reg   [7:0] linebuf_2_addr_reg_634_pp0_iter4_reg;
reg   [7:0] linebuf_2_addr_reg_634_pp0_iter5_reg;
reg   [7:0] linebuf_2_addr_reg_634_pp0_iter6_reg;
reg   [7:0] linebuf_2_addr_reg_634_pp0_iter7_reg;
reg   [7:0] linebuf_2_addr_reg_634_pp0_iter8_reg;
reg   [7:0] linebuf_2_addr_reg_634_pp0_iter9_reg;
wire   [0:0] and_ln42_fu_402_p2;
reg   [0:0] and_ln42_reg_640_pp0_iter2_reg;
reg   [0:0] and_ln42_reg_640_pp0_iter3_reg;
reg   [0:0] and_ln42_reg_640_pp0_iter4_reg;
reg   [0:0] and_ln42_reg_640_pp0_iter5_reg;
reg   [0:0] and_ln42_reg_640_pp0_iter6_reg;
reg   [0:0] and_ln42_reg_640_pp0_iter7_reg;
reg   [0:0] and_ln42_reg_640_pp0_iter8_reg;
reg   [0:0] and_ln42_reg_640_pp0_iter9_reg;
reg   [0:0] and_ln42_reg_640_pp0_iter10_reg;
reg   [0:0] and_ln42_reg_640_pp0_iter11_reg;
wire   [0:0] icmp_ln33_fu_414_p2;
reg   [0:0] icmp_ln33_reg_644;
reg   [7:0] linebuf_1_load_reg_649;
reg   [7:0] linebuf_2_load_reg_655;
wire   [63:0] zext_ln48_fu_446_p1;
reg   [63:0] zext_ln48_reg_661;
reg   [63:0] zext_ln48_reg_661_pp0_iter3_reg;
reg   [63:0] zext_ln48_reg_661_pp0_iter4_reg;
reg   [63:0] zext_ln48_reg_661_pp0_iter5_reg;
reg   [63:0] zext_ln48_reg_661_pp0_iter6_reg;
reg   [63:0] zext_ln48_reg_661_pp0_iter7_reg;
reg   [63:0] zext_ln48_reg_661_pp0_iter8_reg;
reg   [7:0] linebuf_1_load_1_reg_672;
reg   [7:0] linebuf_1_load_1_reg_672_pp0_iter4_reg;
reg   [7:0] linebuf_1_load_1_reg_672_pp0_iter5_reg;
reg   [7:0] linebuf_1_load_1_reg_672_pp0_iter6_reg;
reg   [7:0] linebuf_1_load_1_reg_672_pp0_iter7_reg;
reg   [7:0] linebuf_1_load_1_reg_672_pp0_iter8_reg;
reg   [7:0] linebuf_1_load_1_reg_672_pp0_iter9_reg;
reg   [7:0] linebuf_1_load_1_reg_672_pp0_iter10_reg;
wire   [8:0] add_ln57_fu_457_p2;
reg   [8:0] add_ln57_reg_677;
reg   [8:0] add_ln57_reg_677_pp0_iter4_reg;
reg   [8:0] add_ln57_reg_677_pp0_iter5_reg;
reg   [8:0] add_ln57_reg_677_pp0_iter6_reg;
reg   [8:0] add_ln57_reg_677_pp0_iter7_reg;
reg   [8:0] add_ln57_reg_677_pp0_iter8_reg;
reg   [8:0] add_ln57_reg_677_pp0_iter9_reg;
reg   [7:0] gmem0_addr_read_reg_682;
reg   [7:0] linebuf_load_reg_698;
reg   [7:0] linebuf_2_load_1_reg_703;
wire   [9:0] add_ln57_1_fu_469_p2;
reg   [9:0] add_ln57_1_reg_708;
wire   [9:0] trunc_ln61_fu_509_p1;
reg   [9:0] trunc_ln61_reg_713;
reg   [0:0] tmp_2_reg_718;
wire   [7:0] select_ln66_fu_561_p3;
reg   [7:0] select_ln66_reg_729;
wire   [7:0] linebuf_address0;
wire   [7:0] linebuf_address1;
wire   [7:0] linebuf_q1;
wire   [7:0] linebuf_1_address1;
wire   [7:0] linebuf_1_q1;
wire   [7:0] linebuf_1_address2;
wire   [7:0] linebuf_1_q2;
wire   [7:0] linebuf_2_address1;
wire   [7:0] linebuf_2_q1;
wire   [7:0] linebuf_2_address2;
wire   [7:0] linebuf_2_q2;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_icmp_ln335_phi_fu_279_p4;
reg    ap_loop_init_pp0_iter1_reg;
reg    ap_block_pp0_stage0_01001;
reg   [15:0] indvar_flatten2_fu_118;
wire   [15:0] add_ln32_1_fu_309_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten2_load;
reg   [15:0] ap_sig_allocacmp_indvar_flatten2_load_1;
reg   [8:0] row3_fu_122;
wire   [8:0] row_fu_352_p3;
reg   [8:0] col4_fu_126;
wire   [8:0] col_fu_408_p2;
reg   [8:0] add_ln326_fu_130;
wire   [8:0] add_ln32_fu_420_p2;
reg    linebuf_1_ce2_local;
reg    linebuf_1_ce1_local;
reg    linebuf_1_we0_local;
reg    linebuf_1_ce0_local;
reg    linebuf_2_ce2_local;
reg    linebuf_2_ce1_local;
reg    linebuf_2_we0_local;
reg    linebuf_2_ce0_local;
reg    linebuf_we0_local;
reg    linebuf_ce0_local;
reg    linebuf_ce1_local;
wire   [7:0] tmp_fu_360_p4;
wire   [8:0] select_ln32_fu_344_p3;
wire   [7:0] tmp_1_fu_386_p4;
wire   [0:0] icmp10_fu_370_p2;
wire   [0:0] icmp_ln42_fu_396_p2;
wire   [7:0] empty_20_fu_441_p2;
wire   [8:0] zext_ln57_1_fu_451_p1;
wire   [8:0] zext_ln57_2_fu_454_p1;
wire   [9:0] zext_ln57_4_fu_466_p1;
wire   [9:0] zext_ln57_3_fu_463_p1;
wire   [10:0] zext_ln57_fu_475_p1;
wire   [10:0] zext_ln57_5_fu_478_p1;
wire   [8:0] zext_ln57_6_fu_487_p1;
wire   [8:0] zext_ln61_fu_490_p1;
wire   [8:0] add_ln61_1_fu_493_p2;
wire   [10:0] zext_ln61_1_fu_499_p1;
wire   [10:0] sub_ln57_fu_481_p2;
wire   [10:0] add_ln61_fu_503_p2;
wire   [12:0] sum_fu_527_p3;
wire   [12:0] sum_1_fu_534_p3;
wire   [4:0] tmp_3_fu_541_p4;
wire   [0:0] icmp_ln64_fu_551_p2;
wire   [7:0] trunc_ln66_fu_557_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_1003;
reg    ap_condition_731;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 indvar_flatten2_fu_118 = 16'd0;
#0 row3_fu_122 = 9'd0;
#0 col4_fu_126 = 9'd0;
#0 add_ln326_fu_130 = 9'd0;
#0 ap_done_reg = 1'b0;
end

conv2d_edge_linebuf_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
linebuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_address0),
    .ce0(linebuf_ce0_local),
    .we0(linebuf_we0_local),
    .d0(linebuf_1_load_reg_649),
    .address1(linebuf_address1),
    .ce1(linebuf_ce1_local),
    .q1(linebuf_q1)
);

conv2d_edge_linebuf_1_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
linebuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_1_addr_reg_628_pp0_iter2_reg),
    .ce0(linebuf_1_ce0_local),
    .we0(linebuf_1_we0_local),
    .d0(linebuf_2_load_reg_655),
    .address1(linebuf_1_address1),
    .ce1(linebuf_1_ce1_local),
    .q1(linebuf_1_q1),
    .address2(linebuf_1_address2),
    .ce2(linebuf_1_ce2_local),
    .q2(linebuf_1_q2)
);

conv2d_edge_linebuf_1_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
linebuf_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_2_addr_reg_634_pp0_iter9_reg),
    .ce0(linebuf_2_ce0_local),
    .we0(linebuf_2_we0_local),
    .d0(gmem0_addr_read_reg_682),
    .address1(linebuf_2_address1),
    .ce1(linebuf_2_ce1_local),
    .q1(linebuf_2_q1),
    .address2(linebuf_2_address2),
    .ce2(linebuf_2_ce2_local),
    .q2(linebuf_2_q2)
);

conv2d_edge_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_r(input_r),
    .output_r(output_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

conv2d_edge_gmem0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 11 ),
    .CH0_USER_DW( 8 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 0 ))
gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(gmem0_ARVALID),
    .I_CH0_ARREADY(gmem0_ARREADY),
    .I_CH0_ARADDR(input_r_read_reg_603),
    .I_CH0_ARLEN(gmem0_ARLEN),
    .I_CH0_RVALID(gmem0_RVALID),
    .I_CH0_RREADY(gmem0_RREADY),
    .I_CH0_RDATA(gmem0_RDATA),
    .I_CH0_RFIFONUM(gmem0_RFIFONUM),
    .I_CH0_AWVALID(1'b0),
    .I_CH0_AWREADY(gmem0_AWREADY),
    .I_CH0_AWADDR(64'd0),
    .I_CH0_AWLEN(32'd0),
    .I_CH0_WVALID(1'b0),
    .I_CH0_WREADY(gmem0_WREADY),
    .I_CH0_WDATA(8'd0),
    .I_CH0_WSTRB(1'd0),
    .I_CH0_BVALID(gmem0_BVALID),
    .I_CH0_BREADY(1'b0)
);

conv2d_edge_gmem1_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 4 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM1_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 11 ),
    .CH0_USER_DW( 8 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 0 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem1_m_axi_U(
    .AWVALID(m_axi_gmem1_AWVALID),
    .AWREADY(m_axi_gmem1_AWREADY),
    .AWADDR(m_axi_gmem1_AWADDR),
    .AWID(m_axi_gmem1_AWID),
    .AWLEN(m_axi_gmem1_AWLEN),
    .AWSIZE(m_axi_gmem1_AWSIZE),
    .AWBURST(m_axi_gmem1_AWBURST),
    .AWLOCK(m_axi_gmem1_AWLOCK),
    .AWCACHE(m_axi_gmem1_AWCACHE),
    .AWPROT(m_axi_gmem1_AWPROT),
    .AWQOS(m_axi_gmem1_AWQOS),
    .AWREGION(m_axi_gmem1_AWREGION),
    .AWUSER(m_axi_gmem1_AWUSER),
    .WVALID(m_axi_gmem1_WVALID),
    .WREADY(m_axi_gmem1_WREADY),
    .WDATA(m_axi_gmem1_WDATA),
    .WSTRB(m_axi_gmem1_WSTRB),
    .WLAST(m_axi_gmem1_WLAST),
    .WID(m_axi_gmem1_WID),
    .WUSER(m_axi_gmem1_WUSER),
    .ARVALID(m_axi_gmem1_ARVALID),
    .ARREADY(m_axi_gmem1_ARREADY),
    .ARADDR(m_axi_gmem1_ARADDR),
    .ARID(m_axi_gmem1_ARID),
    .ARLEN(m_axi_gmem1_ARLEN),
    .ARSIZE(m_axi_gmem1_ARSIZE),
    .ARBURST(m_axi_gmem1_ARBURST),
    .ARLOCK(m_axi_gmem1_ARLOCK),
    .ARCACHE(m_axi_gmem1_ARCACHE),
    .ARPROT(m_axi_gmem1_ARPROT),
    .ARQOS(m_axi_gmem1_ARQOS),
    .ARREGION(m_axi_gmem1_ARREGION),
    .ARUSER(m_axi_gmem1_ARUSER),
    .RVALID(m_axi_gmem1_RVALID),
    .RREADY(m_axi_gmem1_RREADY),
    .RDATA(m_axi_gmem1_RDATA),
    .RLAST(m_axi_gmem1_RLAST),
    .RID(m_axi_gmem1_RID),
    .RUSER(m_axi_gmem1_RUSER),
    .RRESP(m_axi_gmem1_RRESP),
    .BVALID(m_axi_gmem1_BVALID),
    .BREADY(m_axi_gmem1_BREADY),
    .BRESP(m_axi_gmem1_BRESP),
    .BID(m_axi_gmem1_BID),
    .BUSER(m_axi_gmem1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(1'b0),
    .I_CH0_ARREADY(gmem1_ARREADY),
    .I_CH0_ARADDR(64'd0),
    .I_CH0_ARLEN(32'd0),
    .I_CH0_RVALID(gmem1_RVALID),
    .I_CH0_RREADY(1'b0),
    .I_CH0_RDATA(gmem1_RDATA),
    .I_CH0_RFIFONUM(gmem1_RFIFONUM),
    .I_CH0_AWVALID(gmem1_AWVALID),
    .I_CH0_AWREADY(gmem1_AWREADY),
    .I_CH0_AWADDR(output_r_read_reg_598_pp0_iter11_reg),
    .I_CH0_AWLEN(gmem1_AWLEN),
    .I_CH0_WVALID(gmem1_WVALID),
    .I_CH0_WREADY(gmem1_WREADY),
    .I_CH0_WDATA(select_ln66_reg_729),
    .I_CH0_WSTRB(1'd1),
    .I_CH0_BVALID(gmem1_BVALID),
    .I_CH0_BREADY(gmem1_BREADY)
);

conv2d_edge_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1),
    .ap_loop_exit_ready_delayed(ap_loop_exit_ready_delayed)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter18_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            add_ln326_fu_130 <= 9'd1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add_ln326_fu_130 <= add_ln32_fu_420_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter18_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            col4_fu_126 <= 9'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            col4_fu_126 <= col_fu_408_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_1003)) begin
            first_iter_0_reg_263 <= 1'd0;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            first_iter_0_reg_263 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_731)) begin
        indvar_flatten2_fu_118 <= add_ln32_1_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
    if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        row3_fu_122 <= 9'd0;
    end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        row3_fu_122 <= row_fu_352_p3;
    end
end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln57_1_reg_708 <= add_ln57_1_fu_469_p2;
        add_ln57_reg_677 <= add_ln57_fu_457_p2;
        add_ln57_reg_677_pp0_iter4_reg <= add_ln57_reg_677;
        add_ln57_reg_677_pp0_iter5_reg <= add_ln57_reg_677_pp0_iter4_reg;
        add_ln57_reg_677_pp0_iter6_reg <= add_ln57_reg_677_pp0_iter5_reg;
        add_ln57_reg_677_pp0_iter7_reg <= add_ln57_reg_677_pp0_iter6_reg;
        add_ln57_reg_677_pp0_iter8_reg <= add_ln57_reg_677_pp0_iter7_reg;
        add_ln57_reg_677_pp0_iter9_reg <= add_ln57_reg_677_pp0_iter8_reg;
        and_ln42_reg_640_pp0_iter10_reg <= and_ln42_reg_640_pp0_iter9_reg;
        and_ln42_reg_640_pp0_iter11_reg <= and_ln42_reg_640_pp0_iter10_reg;
        and_ln42_reg_640_pp0_iter12_reg <= and_ln42_reg_640_pp0_iter11_reg;
        and_ln42_reg_640_pp0_iter2_reg <= and_ln42_reg_640;
        and_ln42_reg_640_pp0_iter3_reg <= and_ln42_reg_640_pp0_iter2_reg;
        and_ln42_reg_640_pp0_iter4_reg <= and_ln42_reg_640_pp0_iter3_reg;
        and_ln42_reg_640_pp0_iter5_reg <= and_ln42_reg_640_pp0_iter4_reg;
        and_ln42_reg_640_pp0_iter6_reg <= and_ln42_reg_640_pp0_iter5_reg;
        and_ln42_reg_640_pp0_iter7_reg <= and_ln42_reg_640_pp0_iter6_reg;
        and_ln42_reg_640_pp0_iter8_reg <= and_ln42_reg_640_pp0_iter7_reg;
        and_ln42_reg_640_pp0_iter9_reg <= and_ln42_reg_640_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        first_iter_0_reg_263_pp0_iter10_reg <= first_iter_0_reg_263_pp0_iter9_reg;
        first_iter_0_reg_263_pp0_iter11_reg <= first_iter_0_reg_263_pp0_iter10_reg;
        first_iter_0_reg_263_pp0_iter2_reg <= first_iter_0_reg_263_pp0_iter1_reg;
        first_iter_0_reg_263_pp0_iter3_reg <= first_iter_0_reg_263_pp0_iter2_reg;
        first_iter_0_reg_263_pp0_iter4_reg <= first_iter_0_reg_263_pp0_iter3_reg;
        first_iter_0_reg_263_pp0_iter5_reg <= first_iter_0_reg_263_pp0_iter4_reg;
        first_iter_0_reg_263_pp0_iter6_reg <= first_iter_0_reg_263_pp0_iter5_reg;
        first_iter_0_reg_263_pp0_iter7_reg <= first_iter_0_reg_263_pp0_iter6_reg;
        first_iter_0_reg_263_pp0_iter8_reg <= first_iter_0_reg_263_pp0_iter7_reg;
        first_iter_0_reg_263_pp0_iter9_reg <= first_iter_0_reg_263_pp0_iter8_reg;
        gmem0_addr_read_reg_682 <= gmem0_RDATA;
        icmp_ln32_reg_608_pp0_iter10_reg <= icmp_ln32_reg_608_pp0_iter9_reg;
        icmp_ln32_reg_608_pp0_iter11_reg <= icmp_ln32_reg_608_pp0_iter10_reg;
        icmp_ln32_reg_608_pp0_iter12_reg <= icmp_ln32_reg_608_pp0_iter11_reg;
        icmp_ln32_reg_608_pp0_iter13_reg <= icmp_ln32_reg_608_pp0_iter12_reg;
        icmp_ln32_reg_608_pp0_iter14_reg <= icmp_ln32_reg_608_pp0_iter13_reg;
        icmp_ln32_reg_608_pp0_iter15_reg <= icmp_ln32_reg_608_pp0_iter14_reg;
        icmp_ln32_reg_608_pp0_iter16_reg <= icmp_ln32_reg_608_pp0_iter15_reg;
        icmp_ln32_reg_608_pp0_iter17_reg <= icmp_ln32_reg_608_pp0_iter16_reg;
        icmp_ln32_reg_608_pp0_iter2_reg <= icmp_ln32_reg_608_pp0_iter1_reg;
        icmp_ln32_reg_608_pp0_iter3_reg <= icmp_ln32_reg_608_pp0_iter2_reg;
        icmp_ln32_reg_608_pp0_iter4_reg <= icmp_ln32_reg_608_pp0_iter3_reg;
        icmp_ln32_reg_608_pp0_iter5_reg <= icmp_ln32_reg_608_pp0_iter4_reg;
        icmp_ln32_reg_608_pp0_iter6_reg <= icmp_ln32_reg_608_pp0_iter5_reg;
        icmp_ln32_reg_608_pp0_iter7_reg <= icmp_ln32_reg_608_pp0_iter6_reg;
        icmp_ln32_reg_608_pp0_iter8_reg <= icmp_ln32_reg_608_pp0_iter7_reg;
        icmp_ln32_reg_608_pp0_iter9_reg <= icmp_ln32_reg_608_pp0_iter8_reg;
        linebuf_1_addr_reg_628_pp0_iter2_reg <= linebuf_1_addr_reg_628;
        linebuf_1_load_1_reg_672_pp0_iter10_reg <= linebuf_1_load_1_reg_672_pp0_iter9_reg;
        linebuf_1_load_1_reg_672_pp0_iter4_reg <= linebuf_1_load_1_reg_672;
        linebuf_1_load_1_reg_672_pp0_iter5_reg <= linebuf_1_load_1_reg_672_pp0_iter4_reg;
        linebuf_1_load_1_reg_672_pp0_iter6_reg <= linebuf_1_load_1_reg_672_pp0_iter5_reg;
        linebuf_1_load_1_reg_672_pp0_iter7_reg <= linebuf_1_load_1_reg_672_pp0_iter6_reg;
        linebuf_1_load_1_reg_672_pp0_iter8_reg <= linebuf_1_load_1_reg_672_pp0_iter7_reg;
        linebuf_1_load_1_reg_672_pp0_iter9_reg <= linebuf_1_load_1_reg_672_pp0_iter8_reg;
        linebuf_2_addr_reg_634_pp0_iter2_reg <= linebuf_2_addr_reg_634;
        linebuf_2_addr_reg_634_pp0_iter3_reg <= linebuf_2_addr_reg_634_pp0_iter2_reg;
        linebuf_2_addr_reg_634_pp0_iter4_reg <= linebuf_2_addr_reg_634_pp0_iter3_reg;
        linebuf_2_addr_reg_634_pp0_iter5_reg <= linebuf_2_addr_reg_634_pp0_iter4_reg;
        linebuf_2_addr_reg_634_pp0_iter6_reg <= linebuf_2_addr_reg_634_pp0_iter5_reg;
        linebuf_2_addr_reg_634_pp0_iter7_reg <= linebuf_2_addr_reg_634_pp0_iter6_reg;
        linebuf_2_addr_reg_634_pp0_iter8_reg <= linebuf_2_addr_reg_634_pp0_iter7_reg;
        linebuf_2_addr_reg_634_pp0_iter9_reg <= linebuf_2_addr_reg_634_pp0_iter8_reg;
        output_r_read_reg_598_pp0_iter10_reg <= output_r_read_reg_598_pp0_iter9_reg;
        output_r_read_reg_598_pp0_iter11_reg <= output_r_read_reg_598_pp0_iter10_reg;
        output_r_read_reg_598_pp0_iter2_reg <= output_r_read_reg_598_pp0_iter1_reg;
        output_r_read_reg_598_pp0_iter3_reg <= output_r_read_reg_598_pp0_iter2_reg;
        output_r_read_reg_598_pp0_iter4_reg <= output_r_read_reg_598_pp0_iter3_reg;
        output_r_read_reg_598_pp0_iter5_reg <= output_r_read_reg_598_pp0_iter4_reg;
        output_r_read_reg_598_pp0_iter6_reg <= output_r_read_reg_598_pp0_iter5_reg;
        output_r_read_reg_598_pp0_iter7_reg <= output_r_read_reg_598_pp0_iter6_reg;
        output_r_read_reg_598_pp0_iter8_reg <= output_r_read_reg_598_pp0_iter7_reg;
        output_r_read_reg_598_pp0_iter9_reg <= output_r_read_reg_598_pp0_iter8_reg;
        select_ln66_reg_729 <= select_ln66_fu_561_p3;
        tmp_2_reg_718 <= add_ln61_fu_503_p2[32'd10];
        trunc_ln61_reg_713 <= trunc_ln61_fu_509_p1;
        zext_ln33_reg_618_pp0_iter2_reg[8 : 0] <= zext_ln33_reg_618[8 : 0];
        zext_ln48_reg_661[7 : 0] <= zext_ln48_fu_446_p1[7 : 0];
        zext_ln48_reg_661_pp0_iter3_reg[7 : 0] <= zext_ln48_reg_661[7 : 0];
        zext_ln48_reg_661_pp0_iter4_reg[7 : 0] <= zext_ln48_reg_661_pp0_iter3_reg[7 : 0];
        zext_ln48_reg_661_pp0_iter5_reg[7 : 0] <= zext_ln48_reg_661_pp0_iter4_reg[7 : 0];
        zext_ln48_reg_661_pp0_iter6_reg[7 : 0] <= zext_ln48_reg_661_pp0_iter5_reg[7 : 0];
        zext_ln48_reg_661_pp0_iter7_reg[7 : 0] <= zext_ln48_reg_661_pp0_iter6_reg[7 : 0];
        zext_ln48_reg_661_pp0_iter8_reg[7 : 0] <= zext_ln48_reg_661_pp0_iter7_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln42_reg_640 <= and_ln42_fu_402_p2;
        ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        first_iter_0_reg_263_pp0_iter1_reg <= first_iter_0_reg_263;
        icmp_ln32_reg_608 <= icmp_ln32_fu_318_p2;
        icmp_ln32_reg_608_pp0_iter1_reg <= icmp_ln32_reg_608;
        input_r_read_reg_603 <= input_r;
        linebuf_1_addr_reg_628 <= zext_ln33_fu_376_p1;
        linebuf_2_addr_reg_634 <= zext_ln33_fu_376_p1;
        output_r_read_reg_598 <= output_r;
        output_r_read_reg_598_pp0_iter1_reg <= output_r_read_reg_598;
        trunc_ln33_reg_623 <= trunc_ln33_fu_382_p1;
        zext_ln33_reg_618[8 : 0] <= zext_ln33_fu_376_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln33_reg_644 <= icmp_ln33_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_1_load_1_reg_672 <= linebuf_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_1_load_reg_649 <= linebuf_1_q2;
        linebuf_2_load_reg_655 <= linebuf_2_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_2_load_1_reg_703 <= linebuf_2_q1;
        linebuf_load_reg_698 <= linebuf_q1;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_318_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter18_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_delayed = 1'b1;
    end else begin
        ap_loop_exit_ready_delayed = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_608_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_icmp_ln335_phi_fu_279_p4 = icmp_ln33_reg_644;
    end else if (((ap_loop_init_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_icmp_ln335_phi_fu_279_p4 = 1'd0;
    end else begin
        ap_phi_mux_icmp_ln335_phi_fu_279_p4 = icmp_ln33_reg_644;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten2_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten2_load = indvar_flatten2_fu_118;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten2_load_1 = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten2_load_1 = indvar_flatten2_fu_118;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (first_iter_0_reg_263 == 1'd1))) begin
        gmem0_ARVALID = 1'b1;
    end else begin
        gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_RREADY = 1'b1;
    end else begin
        gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (first_iter_0_reg_263 == 1'd1))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (first_iter_0_reg_263_pp0_iter11_reg == 1'd1))) begin
        gmem1_AWVALID = 1'b1;
    end else begin
        gmem1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_608_pp0_iter17_reg == 1'd1))) begin
        gmem1_BREADY = 1'b1;
    end else begin
        gmem1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln42_reg_640_pp0_iter12_reg))) begin
        gmem1_WVALID = 1'b1;
    end else begin
        gmem1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (first_iter_0_reg_263_pp0_iter11_reg == 1'd1))) begin
        gmem1_blk_n_AW = m_axi_gmem1_AWREADY;
    end else begin
        gmem1_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln32_reg_608_pp0_iter17_reg == 1'd1))) begin
        gmem1_blk_n_B = m_axi_gmem1_BVALID;
    end else begin
        gmem1_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln42_reg_640_pp0_iter12_reg))) begin
        gmem1_blk_n_W = m_axi_gmem1_WREADY;
    end else begin
        gmem1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_1_ce0_local = 1'b1;
    end else begin
        linebuf_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_1_ce1_local = 1'b1;
    end else begin
        linebuf_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_1_ce2_local = 1'b1;
    end else begin
        linebuf_1_ce2_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_1_we0_local = 1'b1;
    end else begin
        linebuf_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_2_ce0_local = 1'b1;
    end else begin
        linebuf_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_2_ce1_local = 1'b1;
    end else begin
        linebuf_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_2_ce2_local = 1'b1;
    end else begin
        linebuf_2_ce2_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_2_we0_local = 1'b1;
    end else begin
        linebuf_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_ce0_local = 1'b1;
    end else begin
        linebuf_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_ce1_local = 1'b1;
    end else begin
        linebuf_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_we0_local = 1'b1;
    end else begin
        linebuf_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_1_fu_309_p2 = (ap_sig_allocacmp_indvar_flatten2_load + 16'd1);

assign add_ln32_fu_420_p2 = (row_fu_352_p3 + 9'd1);

assign add_ln57_1_fu_469_p2 = (zext_ln57_4_fu_466_p1 + zext_ln57_3_fu_463_p1);

assign add_ln57_fu_457_p2 = (zext_ln57_1_fu_451_p1 + zext_ln57_2_fu_454_p1);

assign add_ln61_1_fu_493_p2 = (zext_ln57_6_fu_487_p1 + zext_ln61_fu_490_p1);

assign add_ln61_fu_503_p2 = (zext_ln61_1_fu_499_p1 + sub_ln57_fu_481_p2);

assign and_ln42_fu_402_p2 = (icmp_ln42_fu_396_p2 & icmp10_fu_370_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_block_state19_pp0_stage0_iter18)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_block_state19_pp0_stage0_iter18)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_io)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_io)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_block_state19_pp0_stage0_iter18)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_io)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_io)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = (gmem0_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state13_io = ((first_iter_0_reg_263_pp0_iter11_reg == 1'd1) & (gmem1_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state14_io = ((gmem1_WREADY == 1'b0) & (1'd1 == and_ln42_reg_640_pp0_iter12_reg));
end

always @ (*) begin
    ap_block_state19_pp0_stage0_iter18 = ((icmp_ln32_reg_608_pp0_iter17_reg == 1'd1) & (gmem1_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((first_iter_0_reg_263 == 1'd1) & (gmem0_ARREADY == 1'b0));
end

always @ (*) begin
    ap_condition_1003 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_608 == 1'd0));
end

always @ (*) begin
    ap_condition_731 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_fu_408_p2 = (select_ln32_fu_344_p3 + 9'd1);

assign empty_20_fu_441_p2 = ($signed(trunc_ln33_reg_623) + $signed(8'd254));

assign gmem0_ARLEN = 64'd65536;

assign gmem1_AWLEN = 64'd64516;

assign icmp10_fu_370_p2 = ((tmp_fu_360_p4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_318_p2 = ((ap_sig_allocacmp_indvar_flatten2_load_1 == 16'd65535) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_414_p2 = ((col_fu_408_p2 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_396_p2 = ((tmp_1_fu_386_p4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_551_p2 = ((tmp_3_fu_541_p4 != 5'd0) ? 1'b1 : 1'b0);

assign linebuf_1_address1 = zext_ln48_fu_446_p1;

assign linebuf_1_address2 = zext_ln33_fu_376_p1;

assign linebuf_2_address1 = zext_ln48_reg_661_pp0_iter8_reg;

assign linebuf_2_address2 = zext_ln33_fu_376_p1;

assign linebuf_address0 = zext_ln33_reg_618_pp0_iter2_reg;

assign linebuf_address1 = zext_ln48_reg_661_pp0_iter8_reg;

assign row_fu_352_p3 = ((ap_phi_mux_icmp_ln335_phi_fu_279_p4[0:0] == 1'b1) ? add_ln326_fu_130 : row3_fu_122);

assign select_ln32_fu_344_p3 = ((ap_phi_mux_icmp_ln335_phi_fu_279_p4[0:0] == 1'b1) ? 9'd0 : col4_fu_126);

assign select_ln66_fu_561_p3 = ((icmp_ln64_fu_551_p2[0:0] == 1'b1) ? 8'd255 : trunc_ln66_fu_557_p1);

assign sub_ln57_fu_481_p2 = (zext_ln57_fu_475_p1 - zext_ln57_5_fu_478_p1);

assign sum_1_fu_534_p3 = ((tmp_2_reg_718[0:0] == 1'b1) ? 13'd0 : sum_fu_527_p3);

assign sum_fu_527_p3 = {{trunc_ln61_reg_713}, {3'd0}};

assign tmp_1_fu_386_p4 = {{select_ln32_fu_344_p3[8:1]}};

assign tmp_3_fu_541_p4 = {{sum_1_fu_534_p3[12:8]}};

assign tmp_fu_360_p4 = {{row_fu_352_p3[8:1]}};

assign trunc_ln33_fu_382_p1 = select_ln32_fu_344_p3[7:0];

assign trunc_ln61_fu_509_p1 = add_ln61_fu_503_p2[9:0];

assign trunc_ln66_fu_557_p1 = sum_1_fu_534_p3[7:0];

assign zext_ln33_fu_376_p1 = select_ln32_fu_344_p3;

assign zext_ln48_fu_446_p1 = empty_20_fu_441_p2;

assign zext_ln57_1_fu_451_p1 = linebuf_1_load_reg_649;

assign zext_ln57_2_fu_454_p1 = linebuf_2_load_reg_655;

assign zext_ln57_3_fu_463_p1 = gmem0_addr_read_reg_682;

assign zext_ln57_4_fu_466_p1 = add_ln57_reg_677_pp0_iter9_reg;

assign zext_ln57_5_fu_478_p1 = add_ln57_1_reg_708;

assign zext_ln57_6_fu_487_p1 = linebuf_1_load_1_reg_672_pp0_iter10_reg;

assign zext_ln57_fu_475_p1 = linebuf_load_reg_698;

assign zext_ln61_1_fu_499_p1 = add_ln61_1_fu_493_p2;

assign zext_ln61_fu_490_p1 = linebuf_2_load_1_reg_703;

always @ (posedge ap_clk) begin
    zext_ln33_reg_618[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln33_reg_618_pp0_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln48_reg_661[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln48_reg_661_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln48_reg_661_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln48_reg_661_pp0_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln48_reg_661_pp0_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln48_reg_661_pp0_iter7_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln48_reg_661_pp0_iter8_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //conv2d_edge
