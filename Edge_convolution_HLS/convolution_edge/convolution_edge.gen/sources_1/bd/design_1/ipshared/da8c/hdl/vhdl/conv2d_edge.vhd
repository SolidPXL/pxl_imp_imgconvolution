-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_edge is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv2d_edge is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d_edge_conv2d_edge,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.840000,HLS_SYN_LAT=16412,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=3853,HLS_SYN_LUT=3582,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv64_4000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_3E04 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000011111000000100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_156 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal first_iter_0_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal gmem1_AWVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_WVALID : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BREADY : STD_LOGIC;
    signal first_iter_0_reg_476_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state22_io : BOOLEAN;
    signal and_ln40_reg_1145 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state23_io : BOOLEAN;
    signal icmp_ln30_reg_1119 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln30_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal gmem1_blk_n_W : STD_LOGIC;
    signal gmem1_blk_n_B : STD_LOGIC;
    signal first_iter_0_reg_476_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_476_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_499 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln40_reg_1145_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln31_1_reg_1172 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln31_1_reg_1172_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_499_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_499_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_499_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_499_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_499_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_503 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_503_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_503_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_503_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_503_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_503_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_507_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_507_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_507_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_507_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_507_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln40_reg_1145_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln31_1_reg_1172_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_511_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_511_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_515_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_515_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_519 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_519_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_519_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_r_read_reg_1109 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_1109_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_read_reg_1114 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1119_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_581_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln31_fu_613_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_reg_1134_pp0_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter11_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_reg_1140_pp0_iter12_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln40_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_reg_1145_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_addr_read_reg_1154 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_reg_1154_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_reg_1154_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_reg_1154_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_reg_1154_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_reg_1154_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_reg_1154_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_read_reg_1154_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_fu_698_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_reg_1162 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_1_fu_703_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_1_reg_1167 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln31_1_fu_708_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln31_1_reg_1172_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln31_1_reg_1172_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln31_1_reg_1172_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln31_1_reg_1172_pp0_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln31_1_reg_1172_pp0_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_reg_1184 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_reg_1189 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_3_addr_reg_1194 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_3_addr_reg_1194_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_4_addr_reg_1199 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_4_addr_reg_1199_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_5_addr_reg_1204 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_5_addr_reg_1204_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_addr_reg_1209 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_addr_reg_1209_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_addr_reg_1209_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_addr_reg_1209_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_1_addr_reg_1214 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_1_addr_reg_1214_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_1_addr_reg_1214_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_1_addr_reg_1214_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_2_addr_reg_1219 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_2_addr_reg_1219_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_2_addr_reg_1219_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_2_addr_reg_1219_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln46_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1239 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1239_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1239_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_reg_1249 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_reg_1249_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_reg_1249_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_reg_1249_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_774_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1289 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1289_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1289_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_793_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1327 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_load_reg_1350 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_load_reg_1350_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_reg_1355 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_reg_1355_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_load_reg_1360 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_load_reg_1360_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln55_1_fu_831_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln55_1_reg_1380 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln55_1_reg_1380_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln55_2_fu_883_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln55_2_reg_1385 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_905_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1390 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln55_4_fu_944_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln55_4_reg_1395 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln50_fu_1028_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln50_reg_1400 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_1405 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln63_fu_1072_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln63_reg_1416 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_7_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_8_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_icmp_ln3110_phi_fu_492_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC;
    signal zext_ln31_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal indvar_flatten7_fu_144 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln30_1_fu_546_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten7_load : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten7_load_1 : STD_LOGIC_VECTOR (13 downto 0);
    signal row8_fu_148 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal row_fu_589_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal col9_fu_152 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal col_fu_665_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln3011_fu_156 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln30_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_6_ce0_local : STD_LOGIC;
    signal linebuf_6_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_6_we0_local : STD_LOGIC;
    signal linebuf_7_ce0_local : STD_LOGIC;
    signal linebuf_7_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_7_we0_local : STD_LOGIC;
    signal linebuf_8_ce0_local : STD_LOGIC;
    signal linebuf_8_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_8_we0_local : STD_LOGIC;
    signal linebuf_3_ce0_local : STD_LOGIC;
    signal linebuf_3_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_3_we0_local : STD_LOGIC;
    signal linebuf_4_ce0_local : STD_LOGIC;
    signal linebuf_4_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_4_we0_local : STD_LOGIC;
    signal linebuf_5_ce0_local : STD_LOGIC;
    signal linebuf_5_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_5_we0_local : STD_LOGIC;
    signal linebuf_ce1_local : STD_LOGIC;
    signal linebuf_we0_local : STD_LOGIC;
    signal linebuf_ce0_local : STD_LOGIC;
    signal linebuf_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_1_ce1_local : STD_LOGIC;
    signal linebuf_1_we0_local : STD_LOGIC;
    signal linebuf_1_ce0_local : STD_LOGIC;
    signal linebuf_1_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal linebuf_2_ce1_local : STD_LOGIC;
    signal linebuf_2_we0_local : STD_LOGIC;
    signal linebuf_2_ce0_local : STD_LOGIC;
    signal linebuf_2_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_597_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln31_fu_621_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln31_fu_621_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln31_fu_621_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_637_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_643_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp18_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln46_fu_715_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln46_fu_715_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln46_fu_715_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln46_1_fu_734_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln46_1_fu_734_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln46_1_fu_734_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_774_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_793_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln55_2_fu_812_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln55_4_fu_815_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln55_fu_821_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln55_8_fu_827_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_7_fu_818_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_837_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_856_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_837_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_856_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln55_1_fu_875_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln55_3_fu_879_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_889_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_905_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_889_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln55_10_fu_931_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_fu_924_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln55_3_fu_934_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln55_11_fu_940_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln55_9_fu_928_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_950_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_969_p7 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_950_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_969_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_996_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln50_fu_1003_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln55_12_fu_1007_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln55_fu_1010_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln55_5_fu_988_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_3_fu_1016_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln55_6_fu_992_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_fu_1022_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_2_fu_1046_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_1052_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln61_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln63_fu_1068_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_637_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal mul_ln31_fu_621_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln46_1_fu_734_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln46_fu_715_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_condition_1576 : BOOLEAN;
    signal ap_condition_1033 : BOOLEAN;
    signal tmp_1_fu_774_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_774_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_774_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_793_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_793_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_793_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_837_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_837_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_837_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_856_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_856_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_856_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_889_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_889_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_889_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_905_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_905_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_905_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_950_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_950_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_950_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_969_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_969_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_969_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv2d_edge_mul_8ns_10ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component conv2d_edge_urem_8ns_3ns_2_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component conv2d_edge_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component conv2d_edge_sparsemux_7_2_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2d_edge_linebuf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2d_edge_linebuf_3_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2d_edge_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component conv2d_edge_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component conv2d_edge_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component conv2d_edge_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    linebuf_U : component conv2d_edge_linebuf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 43,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_address0_local,
        ce0 => linebuf_ce0_local,
        we0 => linebuf_we0_local,
        d0 => tmp_reg_1327,
        q0 => linebuf_q0,
        address1 => linebuf_address1,
        ce1 => linebuf_ce1_local,
        q1 => linebuf_q1);

    linebuf_1_U : component conv2d_edge_linebuf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 43,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_1_address0_local,
        ce0 => linebuf_1_ce0_local,
        we0 => linebuf_1_we0_local,
        d0 => tmp_reg_1327,
        q0 => linebuf_1_q0,
        address1 => linebuf_1_address1,
        ce1 => linebuf_1_ce1_local,
        q1 => linebuf_1_q1);

    linebuf_2_U : component conv2d_edge_linebuf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 43,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_2_address0_local,
        ce0 => linebuf_2_ce0_local,
        we0 => linebuf_2_we0_local,
        d0 => tmp_reg_1327,
        q0 => linebuf_2_q0,
        address1 => linebuf_2_address1,
        ce1 => linebuf_2_ce1_local,
        q1 => linebuf_2_q1);

    linebuf_3_U : component conv2d_edge_linebuf_3_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 43,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_3_address0_local,
        ce0 => linebuf_3_ce0_local,
        we0 => linebuf_3_we0_local,
        d0 => tmp_1_reg_1289,
        q0 => linebuf_3_q0);

    linebuf_4_U : component conv2d_edge_linebuf_3_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 43,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_4_address0_local,
        ce0 => linebuf_4_ce0_local,
        we0 => linebuf_4_we0_local,
        d0 => tmp_1_reg_1289,
        q0 => linebuf_4_q0);

    linebuf_5_U : component conv2d_edge_linebuf_3_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 43,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_5_address0_local,
        ce0 => linebuf_5_ce0_local,
        we0 => linebuf_5_we0_local,
        d0 => tmp_1_reg_1289,
        q0 => linebuf_5_q0);

    linebuf_6_U : component conv2d_edge_linebuf_3_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 43,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_6_address0_local,
        ce0 => linebuf_6_ce0_local,
        we0 => linebuf_6_we0_local,
        d0 => gmem0_addr_read_reg_1154_pp0_iter12_reg,
        q0 => linebuf_6_q0);

    linebuf_7_U : component conv2d_edge_linebuf_3_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 43,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_7_address0_local,
        ce0 => linebuf_7_ce0_local,
        we0 => linebuf_7_we0_local,
        d0 => gmem0_addr_read_reg_1154_pp0_iter12_reg,
        q0 => linebuf_7_q0);

    linebuf_8_U : component conv2d_edge_linebuf_3_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 43,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_8_address0_local,
        ce0 => linebuf_8_ce0_local,
        we0 => linebuf_8_we0_local,
        d0 => gmem0_addr_read_reg_1154_pp0_iter12_reg,
        q0 => linebuf_8_q0);

    control_s_axi_U : component conv2d_edge_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component conv2d_edge_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 8,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => gmem0_ARVALID,
        I_CH0_ARREADY => gmem0_ARREADY,
        I_CH0_ARADDR => input_r_read_reg_1114,
        I_CH0_ARLEN => gmem0_ARLEN,
        I_CH0_RVALID => gmem0_RVALID,
        I_CH0_RREADY => gmem0_RREADY,
        I_CH0_RDATA => gmem0_RDATA,
        I_CH0_RFIFONUM => gmem0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => gmem0_AWREADY,
        I_CH0_AWADDR => ap_const_lv64_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => gmem0_WREADY,
        I_CH0_WDATA => ap_const_lv8_0,
        I_CH0_WSTRB => ap_const_lv1_0,
        I_CH0_BVALID => gmem0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    gmem1_m_axi_U : component conv2d_edge_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 8,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 0,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => ap_const_logic_0,
        I_CH0_ARREADY => gmem1_ARREADY,
        I_CH0_ARADDR => ap_const_lv64_0,
        I_CH0_ARLEN => ap_const_lv32_0,
        I_CH0_RVALID => gmem1_RVALID,
        I_CH0_RREADY => ap_const_logic_0,
        I_CH0_RDATA => gmem1_RDATA,
        I_CH0_RFIFONUM => gmem1_RFIFONUM,
        I_CH0_AWVALID => gmem1_AWVALID,
        I_CH0_AWREADY => gmem1_AWREADY,
        I_CH0_AWADDR => output_r_read_reg_1109_pp0_iter20_reg,
        I_CH0_AWLEN => gmem1_AWLEN,
        I_CH0_WVALID => gmem1_WVALID,
        I_CH0_WREADY => gmem1_WREADY,
        I_CH0_WDATA => select_ln63_reg_1416,
        I_CH0_WSTRB => ap_const_lv1_1,
        I_CH0_BVALID => gmem1_BVALID,
        I_CH0_BREADY => gmem1_BREADY);

    mul_8ns_10ns_17_1_1_U1 : component conv2d_edge_mul_8ns_10ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln31_fu_621_p0,
        din1 => mul_ln31_fu_621_p1,
        dout => mul_ln31_fu_621_p2);

    urem_8ns_3ns_2_12_1_U2 : component conv2d_edge_urem_8ns_3ns_2_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln30_fu_581_p3,
        din1 => grp_fu_637_p1,
        ce => grp_fu_637_ce,
        dout => grp_fu_637_p2);

    mul_7ns_9ns_15_1_1_U3 : component conv2d_edge_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln46_fu_715_p0,
        din1 => mul_ln46_fu_715_p1,
        dout => mul_ln46_fu_715_p2);

    mul_7ns_9ns_15_1_1_U4 : component conv2d_edge_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln46_1_fu_734_p0,
        din1 => mul_ln46_1_fu_734_p1,
        dout => mul_ln46_1_fu_734_p2);

    sparsemux_7_2_8_1_1_U5 : component conv2d_edge_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => linebuf_6_q0,
        din1 => linebuf_7_q0,
        din2 => linebuf_8_q0,
        def => tmp_1_fu_774_p7,
        sel => trunc_ln31_1_reg_1172_pp0_iter13_reg,
        dout => tmp_1_fu_774_p9);

    sparsemux_7_2_8_1_1_U6 : component conv2d_edge_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 8,
        CASE1 => "01",
        din1_WIDTH => 8,
        CASE2 => "10",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => linebuf_3_q0,
        din1 => linebuf_4_q0,
        din2 => linebuf_5_q0,
        def => tmp_fu_793_p7,
        sel => trunc_ln31_1_reg_1172_pp0_iter15_reg,
        dout => tmp_fu_793_p9);

    sparsemux_7_2_8_1_1_U7 : component conv2d_edge_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "01",
        din0_WIDTH => 8,
        CASE1 => "10",
        din1_WIDTH => 8,
        CASE2 => "00",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => linebuf_q0,
        din1 => linebuf_1_q0,
        din2 => linebuf_2_q0,
        def => tmp_3_fu_837_p7,
        sel => trunc_ln31_1_reg_1172_pp0_iter17_reg,
        dout => tmp_3_fu_837_p9);

    sparsemux_7_2_8_1_1_U8 : component conv2d_edge_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "10",
        din0_WIDTH => 8,
        CASE1 => "00",
        din1_WIDTH => 8,
        CASE2 => "01",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_511_pp0_iter17_reg,
        din1 => reg_515_pp0_iter17_reg,
        din2 => reg_519_pp0_iter17_reg,
        def => tmp_4_fu_856_p7,
        sel => trunc_ln31_1_reg_1172_pp0_iter17_reg,
        dout => tmp_4_fu_856_p9);

    sparsemux_7_2_8_1_1_U9 : component conv2d_edge_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "10",
        din0_WIDTH => 8,
        CASE1 => "00",
        din1_WIDTH => 8,
        CASE2 => "01",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => linebuf_load_reg_1350_pp0_iter18_reg,
        din1 => linebuf_1_load_reg_1355_pp0_iter18_reg,
        din2 => linebuf_2_load_reg_1360_pp0_iter18_reg,
        def => tmp_2_fu_889_p7,
        sel => trunc_ln31_1_reg_1172_pp0_iter18_reg,
        dout => tmp_2_fu_889_p9);

    sparsemux_7_2_8_1_1_U10 : component conv2d_edge_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "01",
        din0_WIDTH => 8,
        CASE1 => "10",
        din1_WIDTH => 8,
        CASE2 => "00",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_511_pp0_iter18_reg,
        din1 => reg_515_pp0_iter18_reg,
        din2 => reg_519_pp0_iter18_reg,
        def => tmp_5_fu_905_p7,
        sel => trunc_ln31_1_reg_1172_pp0_iter18_reg,
        dout => tmp_5_fu_905_p9);

    sparsemux_7_2_8_1_1_U11 : component conv2d_edge_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "10",
        din0_WIDTH => 8,
        CASE1 => "00",
        din1_WIDTH => 8,
        CASE2 => "01",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_499_pp0_iter19_reg,
        din1 => reg_503_pp0_iter19_reg,
        din2 => reg_507_pp0_iter19_reg,
        def => tmp_6_fu_950_p7,
        sel => trunc_ln31_1_reg_1172_pp0_iter19_reg,
        dout => tmp_6_fu_950_p9);

    sparsemux_7_2_8_1_1_U12 : component conv2d_edge_sparsemux_7_2_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "01",
        din0_WIDTH => 8,
        CASE1 => "10",
        din1_WIDTH => 8,
        CASE2 => "00",
        din2_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => reg_499_pp0_iter19_reg,
        din1 => reg_503_pp0_iter19_reg,
        din2 => reg_507_pp0_iter19_reg,
        def => tmp_7_fu_969_p7,
        sel => trunc_ln31_1_reg_1172_pp0_iter19_reg,
        dout => tmp_7_fu_969_p9);

    flow_control_loop_delay_pipe_U : component conv2d_edge_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter27_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    add_ln3011_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    add_ln3011_fu_156 <= ap_const_lv8_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add_ln3011_fu_156 <= add_ln30_fu_677_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter27_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter26_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
            end if; 
        end if;
    end process;

    col9_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    col9_fu_152 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    col9_fu_152 <= col_fu_665_p2;
                end if;
            end if; 
        end if;
    end process;

    first_iter_0_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_1576)) then 
                    first_iter_0_reg_476 <= ap_const_lv1_0;
                elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    first_iter_0_reg_476 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1033)) then
                indvar_flatten7_fu_144 <= add_ln30_1_fu_546_p2;
            end if;
        end if;
    end process;

    row8_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    row8_fu_148 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    row8_fu_148 <= row_fu_589_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln46_1_reg_1167 <= add_ln46_1_fu_703_p2;
                add_ln46_reg_1162 <= add_ln46_fu_698_p2;
                add_ln55_1_reg_1380 <= add_ln55_1_fu_831_p2;
                add_ln55_1_reg_1380_pp0_iter18_reg <= add_ln55_1_reg_1380;
                add_ln55_2_reg_1385 <= add_ln55_2_fu_883_p2;
                add_ln55_4_reg_1395 <= add_ln55_4_fu_944_p2;
                and_ln40_reg_1145_pp0_iter10_reg <= and_ln40_reg_1145_pp0_iter9_reg;
                and_ln40_reg_1145_pp0_iter11_reg <= and_ln40_reg_1145_pp0_iter10_reg;
                and_ln40_reg_1145_pp0_iter12_reg <= and_ln40_reg_1145_pp0_iter11_reg;
                and_ln40_reg_1145_pp0_iter13_reg <= and_ln40_reg_1145_pp0_iter12_reg;
                and_ln40_reg_1145_pp0_iter14_reg <= and_ln40_reg_1145_pp0_iter13_reg;
                and_ln40_reg_1145_pp0_iter15_reg <= and_ln40_reg_1145_pp0_iter14_reg;
                and_ln40_reg_1145_pp0_iter16_reg <= and_ln40_reg_1145_pp0_iter15_reg;
                and_ln40_reg_1145_pp0_iter17_reg <= and_ln40_reg_1145_pp0_iter16_reg;
                and_ln40_reg_1145_pp0_iter18_reg <= and_ln40_reg_1145_pp0_iter17_reg;
                and_ln40_reg_1145_pp0_iter19_reg <= and_ln40_reg_1145_pp0_iter18_reg;
                and_ln40_reg_1145_pp0_iter20_reg <= and_ln40_reg_1145_pp0_iter19_reg;
                and_ln40_reg_1145_pp0_iter21_reg <= and_ln40_reg_1145_pp0_iter20_reg;
                and_ln40_reg_1145_pp0_iter2_reg <= and_ln40_reg_1145;
                and_ln40_reg_1145_pp0_iter3_reg <= and_ln40_reg_1145_pp0_iter2_reg;
                and_ln40_reg_1145_pp0_iter4_reg <= and_ln40_reg_1145_pp0_iter3_reg;
                and_ln40_reg_1145_pp0_iter5_reg <= and_ln40_reg_1145_pp0_iter4_reg;
                and_ln40_reg_1145_pp0_iter6_reg <= and_ln40_reg_1145_pp0_iter5_reg;
                and_ln40_reg_1145_pp0_iter7_reg <= and_ln40_reg_1145_pp0_iter6_reg;
                and_ln40_reg_1145_pp0_iter8_reg <= and_ln40_reg_1145_pp0_iter7_reg;
                and_ln40_reg_1145_pp0_iter9_reg <= and_ln40_reg_1145_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                first_iter_0_reg_476_pp0_iter10_reg <= first_iter_0_reg_476_pp0_iter9_reg;
                first_iter_0_reg_476_pp0_iter11_reg <= first_iter_0_reg_476_pp0_iter10_reg;
                first_iter_0_reg_476_pp0_iter12_reg <= first_iter_0_reg_476_pp0_iter11_reg;
                first_iter_0_reg_476_pp0_iter13_reg <= first_iter_0_reg_476_pp0_iter12_reg;
                first_iter_0_reg_476_pp0_iter14_reg <= first_iter_0_reg_476_pp0_iter13_reg;
                first_iter_0_reg_476_pp0_iter15_reg <= first_iter_0_reg_476_pp0_iter14_reg;
                first_iter_0_reg_476_pp0_iter16_reg <= first_iter_0_reg_476_pp0_iter15_reg;
                first_iter_0_reg_476_pp0_iter17_reg <= first_iter_0_reg_476_pp0_iter16_reg;
                first_iter_0_reg_476_pp0_iter18_reg <= first_iter_0_reg_476_pp0_iter17_reg;
                first_iter_0_reg_476_pp0_iter19_reg <= first_iter_0_reg_476_pp0_iter18_reg;
                first_iter_0_reg_476_pp0_iter20_reg <= first_iter_0_reg_476_pp0_iter19_reg;
                first_iter_0_reg_476_pp0_iter2_reg <= first_iter_0_reg_476_pp0_iter1_reg;
                first_iter_0_reg_476_pp0_iter3_reg <= first_iter_0_reg_476_pp0_iter2_reg;
                first_iter_0_reg_476_pp0_iter4_reg <= first_iter_0_reg_476_pp0_iter3_reg;
                first_iter_0_reg_476_pp0_iter5_reg <= first_iter_0_reg_476_pp0_iter4_reg;
                first_iter_0_reg_476_pp0_iter6_reg <= first_iter_0_reg_476_pp0_iter5_reg;
                first_iter_0_reg_476_pp0_iter7_reg <= first_iter_0_reg_476_pp0_iter6_reg;
                first_iter_0_reg_476_pp0_iter8_reg <= first_iter_0_reg_476_pp0_iter7_reg;
                first_iter_0_reg_476_pp0_iter9_reg <= first_iter_0_reg_476_pp0_iter8_reg;
                gmem0_addr_read_reg_1154 <= gmem0_RDATA;
                gmem0_addr_read_reg_1154_pp0_iter10_reg <= gmem0_addr_read_reg_1154;
                gmem0_addr_read_reg_1154_pp0_iter11_reg <= gmem0_addr_read_reg_1154_pp0_iter10_reg;
                gmem0_addr_read_reg_1154_pp0_iter12_reg <= gmem0_addr_read_reg_1154_pp0_iter11_reg;
                gmem0_addr_read_reg_1154_pp0_iter13_reg <= gmem0_addr_read_reg_1154_pp0_iter12_reg;
                gmem0_addr_read_reg_1154_pp0_iter14_reg <= gmem0_addr_read_reg_1154_pp0_iter13_reg;
                gmem0_addr_read_reg_1154_pp0_iter15_reg <= gmem0_addr_read_reg_1154_pp0_iter14_reg;
                gmem0_addr_read_reg_1154_pp0_iter16_reg <= gmem0_addr_read_reg_1154_pp0_iter15_reg;
                icmp_ln30_reg_1119_pp0_iter10_reg <= icmp_ln30_reg_1119_pp0_iter9_reg;
                icmp_ln30_reg_1119_pp0_iter11_reg <= icmp_ln30_reg_1119_pp0_iter10_reg;
                icmp_ln30_reg_1119_pp0_iter12_reg <= icmp_ln30_reg_1119_pp0_iter11_reg;
                icmp_ln30_reg_1119_pp0_iter13_reg <= icmp_ln30_reg_1119_pp0_iter12_reg;
                icmp_ln30_reg_1119_pp0_iter14_reg <= icmp_ln30_reg_1119_pp0_iter13_reg;
                icmp_ln30_reg_1119_pp0_iter15_reg <= icmp_ln30_reg_1119_pp0_iter14_reg;
                icmp_ln30_reg_1119_pp0_iter16_reg <= icmp_ln30_reg_1119_pp0_iter15_reg;
                icmp_ln30_reg_1119_pp0_iter17_reg <= icmp_ln30_reg_1119_pp0_iter16_reg;
                icmp_ln30_reg_1119_pp0_iter18_reg <= icmp_ln30_reg_1119_pp0_iter17_reg;
                icmp_ln30_reg_1119_pp0_iter19_reg <= icmp_ln30_reg_1119_pp0_iter18_reg;
                icmp_ln30_reg_1119_pp0_iter20_reg <= icmp_ln30_reg_1119_pp0_iter19_reg;
                icmp_ln30_reg_1119_pp0_iter21_reg <= icmp_ln30_reg_1119_pp0_iter20_reg;
                icmp_ln30_reg_1119_pp0_iter22_reg <= icmp_ln30_reg_1119_pp0_iter21_reg;
                icmp_ln30_reg_1119_pp0_iter23_reg <= icmp_ln30_reg_1119_pp0_iter22_reg;
                icmp_ln30_reg_1119_pp0_iter24_reg <= icmp_ln30_reg_1119_pp0_iter23_reg;
                icmp_ln30_reg_1119_pp0_iter25_reg <= icmp_ln30_reg_1119_pp0_iter24_reg;
                icmp_ln30_reg_1119_pp0_iter26_reg <= icmp_ln30_reg_1119_pp0_iter25_reg;
                icmp_ln30_reg_1119_pp0_iter2_reg <= icmp_ln30_reg_1119_pp0_iter1_reg;
                icmp_ln30_reg_1119_pp0_iter3_reg <= icmp_ln30_reg_1119_pp0_iter2_reg;
                icmp_ln30_reg_1119_pp0_iter4_reg <= icmp_ln30_reg_1119_pp0_iter3_reg;
                icmp_ln30_reg_1119_pp0_iter5_reg <= icmp_ln30_reg_1119_pp0_iter4_reg;
                icmp_ln30_reg_1119_pp0_iter6_reg <= icmp_ln30_reg_1119_pp0_iter5_reg;
                icmp_ln30_reg_1119_pp0_iter7_reg <= icmp_ln30_reg_1119_pp0_iter6_reg;
                icmp_ln30_reg_1119_pp0_iter8_reg <= icmp_ln30_reg_1119_pp0_iter7_reg;
                icmp_ln30_reg_1119_pp0_iter9_reg <= icmp_ln30_reg_1119_pp0_iter8_reg;
                linebuf_1_addr_reg_1214 <= zext_ln31_fu_750_p1(6 - 1 downto 0);
                linebuf_1_addr_reg_1214_pp0_iter14_reg <= linebuf_1_addr_reg_1214;
                linebuf_1_addr_reg_1214_pp0_iter15_reg <= linebuf_1_addr_reg_1214_pp0_iter14_reg;
                linebuf_1_addr_reg_1214_pp0_iter16_reg <= linebuf_1_addr_reg_1214_pp0_iter15_reg;
                linebuf_1_load_reg_1355_pp0_iter18_reg <= linebuf_1_load_reg_1355;
                linebuf_2_addr_reg_1219 <= zext_ln31_fu_750_p1(6 - 1 downto 0);
                linebuf_2_addr_reg_1219_pp0_iter14_reg <= linebuf_2_addr_reg_1219;
                linebuf_2_addr_reg_1219_pp0_iter15_reg <= linebuf_2_addr_reg_1219_pp0_iter14_reg;
                linebuf_2_addr_reg_1219_pp0_iter16_reg <= linebuf_2_addr_reg_1219_pp0_iter15_reg;
                linebuf_2_load_reg_1360_pp0_iter18_reg <= linebuf_2_load_reg_1360;
                linebuf_3_addr_reg_1194 <= zext_ln31_fu_750_p1(6 - 1 downto 0);
                linebuf_3_addr_reg_1194_pp0_iter14_reg <= linebuf_3_addr_reg_1194;
                linebuf_4_addr_reg_1199 <= zext_ln31_fu_750_p1(6 - 1 downto 0);
                linebuf_4_addr_reg_1199_pp0_iter14_reg <= linebuf_4_addr_reg_1199;
                linebuf_5_addr_reg_1204 <= zext_ln31_fu_750_p1(6 - 1 downto 0);
                linebuf_5_addr_reg_1204_pp0_iter14_reg <= linebuf_5_addr_reg_1204;
                linebuf_addr_reg_1209 <= zext_ln31_fu_750_p1(6 - 1 downto 0);
                linebuf_addr_reg_1209_pp0_iter14_reg <= linebuf_addr_reg_1209;
                linebuf_addr_reg_1209_pp0_iter15_reg <= linebuf_addr_reg_1209_pp0_iter14_reg;
                linebuf_addr_reg_1209_pp0_iter16_reg <= linebuf_addr_reg_1209_pp0_iter15_reg;
                linebuf_load_reg_1350_pp0_iter18_reg <= linebuf_load_reg_1350;
                output_r_read_reg_1109_pp0_iter10_reg <= output_r_read_reg_1109_pp0_iter9_reg;
                output_r_read_reg_1109_pp0_iter11_reg <= output_r_read_reg_1109_pp0_iter10_reg;
                output_r_read_reg_1109_pp0_iter12_reg <= output_r_read_reg_1109_pp0_iter11_reg;
                output_r_read_reg_1109_pp0_iter13_reg <= output_r_read_reg_1109_pp0_iter12_reg;
                output_r_read_reg_1109_pp0_iter14_reg <= output_r_read_reg_1109_pp0_iter13_reg;
                output_r_read_reg_1109_pp0_iter15_reg <= output_r_read_reg_1109_pp0_iter14_reg;
                output_r_read_reg_1109_pp0_iter16_reg <= output_r_read_reg_1109_pp0_iter15_reg;
                output_r_read_reg_1109_pp0_iter17_reg <= output_r_read_reg_1109_pp0_iter16_reg;
                output_r_read_reg_1109_pp0_iter18_reg <= output_r_read_reg_1109_pp0_iter17_reg;
                output_r_read_reg_1109_pp0_iter19_reg <= output_r_read_reg_1109_pp0_iter18_reg;
                output_r_read_reg_1109_pp0_iter20_reg <= output_r_read_reg_1109_pp0_iter19_reg;
                output_r_read_reg_1109_pp0_iter2_reg <= output_r_read_reg_1109_pp0_iter1_reg;
                output_r_read_reg_1109_pp0_iter3_reg <= output_r_read_reg_1109_pp0_iter2_reg;
                output_r_read_reg_1109_pp0_iter4_reg <= output_r_read_reg_1109_pp0_iter3_reg;
                output_r_read_reg_1109_pp0_iter5_reg <= output_r_read_reg_1109_pp0_iter4_reg;
                output_r_read_reg_1109_pp0_iter6_reg <= output_r_read_reg_1109_pp0_iter5_reg;
                output_r_read_reg_1109_pp0_iter7_reg <= output_r_read_reg_1109_pp0_iter6_reg;
                output_r_read_reg_1109_pp0_iter8_reg <= output_r_read_reg_1109_pp0_iter7_reg;
                output_r_read_reg_1109_pp0_iter9_reg <= output_r_read_reg_1109_pp0_iter8_reg;
                reg_499_pp0_iter15_reg <= reg_499;
                reg_499_pp0_iter16_reg <= reg_499_pp0_iter15_reg;
                reg_499_pp0_iter17_reg <= reg_499_pp0_iter16_reg;
                reg_499_pp0_iter18_reg <= reg_499_pp0_iter17_reg;
                reg_499_pp0_iter19_reg <= reg_499_pp0_iter18_reg;
                reg_503_pp0_iter15_reg <= reg_503;
                reg_503_pp0_iter16_reg <= reg_503_pp0_iter15_reg;
                reg_503_pp0_iter17_reg <= reg_503_pp0_iter16_reg;
                reg_503_pp0_iter18_reg <= reg_503_pp0_iter17_reg;
                reg_503_pp0_iter19_reg <= reg_503_pp0_iter18_reg;
                reg_507_pp0_iter15_reg <= reg_507;
                reg_507_pp0_iter16_reg <= reg_507_pp0_iter15_reg;
                reg_507_pp0_iter17_reg <= reg_507_pp0_iter16_reg;
                reg_507_pp0_iter18_reg <= reg_507_pp0_iter17_reg;
                reg_507_pp0_iter19_reg <= reg_507_pp0_iter18_reg;
                reg_511_pp0_iter17_reg <= reg_511;
                reg_511_pp0_iter18_reg <= reg_511_pp0_iter17_reg;
                reg_515_pp0_iter17_reg <= reg_515;
                reg_515_pp0_iter18_reg <= reg_515_pp0_iter17_reg;
                reg_519_pp0_iter17_reg <= reg_519;
                reg_519_pp0_iter18_reg <= reg_519_pp0_iter17_reg;
                select_ln63_reg_1416 <= select_ln63_fu_1072_p3;
                tmp_11_reg_1184 <= mul_ln46_fu_715_p2(14 downto 9);
                tmp_12_reg_1189 <= mul_ln46_1_fu_734_p2(14 downto 9);
                tmp_13_reg_1405 <= sum_fu_1022_p2(11 downto 11);
                tmp_1_reg_1289 <= tmp_1_fu_774_p9;
                tmp_1_reg_1289_pp0_iter15_reg <= tmp_1_reg_1289;
                tmp_1_reg_1289_pp0_iter16_reg <= tmp_1_reg_1289_pp0_iter15_reg;
                tmp_5_reg_1390 <= tmp_5_fu_905_p9;
                tmp_9_reg_1140_pp0_iter10_reg <= tmp_9_reg_1140_pp0_iter9_reg;
                tmp_9_reg_1140_pp0_iter11_reg <= tmp_9_reg_1140_pp0_iter10_reg;
                tmp_9_reg_1140_pp0_iter12_reg <= tmp_9_reg_1140_pp0_iter11_reg;
                tmp_9_reg_1140_pp0_iter2_reg <= tmp_9_reg_1140;
                tmp_9_reg_1140_pp0_iter3_reg <= tmp_9_reg_1140_pp0_iter2_reg;
                tmp_9_reg_1140_pp0_iter4_reg <= tmp_9_reg_1140_pp0_iter3_reg;
                tmp_9_reg_1140_pp0_iter5_reg <= tmp_9_reg_1140_pp0_iter4_reg;
                tmp_9_reg_1140_pp0_iter6_reg <= tmp_9_reg_1140_pp0_iter5_reg;
                tmp_9_reg_1140_pp0_iter7_reg <= tmp_9_reg_1140_pp0_iter6_reg;
                tmp_9_reg_1140_pp0_iter8_reg <= tmp_9_reg_1140_pp0_iter7_reg;
                tmp_9_reg_1140_pp0_iter9_reg <= tmp_9_reg_1140_pp0_iter8_reg;
                tmp_reg_1327 <= tmp_fu_793_p9;
                trunc_ln31_1_reg_1172 <= trunc_ln31_1_fu_708_p1;
                trunc_ln31_1_reg_1172_pp0_iter13_reg <= trunc_ln31_1_reg_1172;
                trunc_ln31_1_reg_1172_pp0_iter14_reg <= trunc_ln31_1_reg_1172_pp0_iter13_reg;
                trunc_ln31_1_reg_1172_pp0_iter15_reg <= trunc_ln31_1_reg_1172_pp0_iter14_reg;
                trunc_ln31_1_reg_1172_pp0_iter16_reg <= trunc_ln31_1_reg_1172_pp0_iter15_reg;
                trunc_ln31_1_reg_1172_pp0_iter17_reg <= trunc_ln31_1_reg_1172_pp0_iter16_reg;
                trunc_ln31_1_reg_1172_pp0_iter18_reg <= trunc_ln31_1_reg_1172_pp0_iter17_reg;
                trunc_ln31_1_reg_1172_pp0_iter19_reg <= trunc_ln31_1_reg_1172_pp0_iter18_reg;
                trunc_ln31_reg_1134_pp0_iter10_reg <= trunc_ln31_reg_1134_pp0_iter9_reg;
                trunc_ln31_reg_1134_pp0_iter2_reg <= trunc_ln31_reg_1134;
                trunc_ln31_reg_1134_pp0_iter3_reg <= trunc_ln31_reg_1134_pp0_iter2_reg;
                trunc_ln31_reg_1134_pp0_iter4_reg <= trunc_ln31_reg_1134_pp0_iter3_reg;
                trunc_ln31_reg_1134_pp0_iter5_reg <= trunc_ln31_reg_1134_pp0_iter4_reg;
                trunc_ln31_reg_1134_pp0_iter6_reg <= trunc_ln31_reg_1134_pp0_iter5_reg;
                trunc_ln31_reg_1134_pp0_iter7_reg <= trunc_ln31_reg_1134_pp0_iter6_reg;
                trunc_ln31_reg_1134_pp0_iter8_reg <= trunc_ln31_reg_1134_pp0_iter7_reg;
                trunc_ln31_reg_1134_pp0_iter9_reg <= trunc_ln31_reg_1134_pp0_iter8_reg;
                trunc_ln50_reg_1400 <= trunc_ln50_fu_1028_p1;
                    zext_ln46_1_reg_1249(5 downto 0) <= zext_ln46_1_fu_768_p1(5 downto 0);
                    zext_ln46_1_reg_1249_pp0_iter14_reg(5 downto 0) <= zext_ln46_1_reg_1249(5 downto 0);
                    zext_ln46_1_reg_1249_pp0_iter15_reg(5 downto 0) <= zext_ln46_1_reg_1249_pp0_iter14_reg(5 downto 0);
                    zext_ln46_1_reg_1249_pp0_iter16_reg(5 downto 0) <= zext_ln46_1_reg_1249_pp0_iter15_reg(5 downto 0);
                    zext_ln46_reg_1239(5 downto 0) <= zext_ln46_fu_762_p1(5 downto 0);
                    zext_ln46_reg_1239_pp0_iter14_reg(5 downto 0) <= zext_ln46_reg_1239(5 downto 0);
                    zext_ln46_reg_1239_pp0_iter15_reg(5 downto 0) <= zext_ln46_reg_1239_pp0_iter14_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln40_reg_1145 <= and_ln40_fu_659_p2;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                first_iter_0_reg_476_pp0_iter1_reg <= first_iter_0_reg_476;
                icmp_ln30_reg_1119 <= icmp_ln30_fu_555_p2;
                icmp_ln30_reg_1119_pp0_iter1_reg <= icmp_ln30_reg_1119;
                input_r_read_reg_1114 <= input_r;
                output_r_read_reg_1109 <= output_r;
                output_r_read_reg_1109_pp0_iter1_reg <= output_r_read_reg_1109;
                tmp_9_reg_1140 <= mul_ln31_fu_621_p2(16 downto 10);
                trunc_ln31_reg_1134 <= trunc_ln31_fu_613_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln31_reg_1149 <= icmp_ln31_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                linebuf_1_load_reg_1355 <= linebuf_1_q1;
                linebuf_2_load_reg_1360 <= linebuf_2_q1;
                linebuf_load_reg_1350 <= linebuf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter13_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter13_reg)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter13_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter13_reg)))) then
                reg_499 <= linebuf_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter13_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter13_reg)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter13_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter13_reg)))) then
                reg_503 <= linebuf_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter13_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter13_reg)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter13_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter13_reg)))) then
                reg_507 <= linebuf_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter15_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter15_reg)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter15_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter15_reg)))) then
                reg_511 <= linebuf_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter15_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter15_reg)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter15_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter15_reg)))) then
                reg_515 <= linebuf_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter15_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter15_reg)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter15_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter15_reg)))) then
                reg_519 <= linebuf_5_q0;
            end if;
        end if;
    end process;
    zext_ln46_reg_1239(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_1239_pp0_iter14_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_1239_pp0_iter15_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln46_1_reg_1249(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln46_1_reg_1249_pp0_iter14_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln46_1_reg_1249_pp0_iter15_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln46_1_reg_1249_pp0_iter16_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln30_1_fu_546_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten7_load) + unsigned(ap_const_lv14_1));
    add_ln30_fu_677_p2 <= std_logic_vector(unsigned(row_fu_589_p3) + unsigned(ap_const_lv8_1));
    add_ln46_1_fu_703_p2 <= std_logic_vector(unsigned(trunc_ln31_reg_1134_pp0_iter10_reg) + unsigned(ap_const_lv7_7F));
    add_ln46_fu_698_p2 <= std_logic_vector(unsigned(trunc_ln31_reg_1134_pp0_iter10_reg) + unsigned(ap_const_lv7_7E));
    add_ln55_1_fu_831_p2 <= std_logic_vector(unsigned(zext_ln55_8_fu_827_p1) + unsigned(zext_ln55_7_fu_818_p1));
    add_ln55_2_fu_883_p2 <= std_logic_vector(unsigned(zext_ln55_1_fu_875_p1) + unsigned(zext_ln55_3_fu_879_p1));
    add_ln55_3_fu_934_p2 <= std_logic_vector(unsigned(zext_ln55_10_fu_931_p1) + unsigned(zext_ln55_fu_924_p1));
    add_ln55_4_fu_944_p2 <= std_logic_vector(unsigned(zext_ln55_11_fu_940_p1) + unsigned(zext_ln55_9_fu_928_p1));
    add_ln55_fu_821_p2 <= std_logic_vector(unsigned(zext_ln55_2_fu_812_p1) + unsigned(zext_ln55_4_fu_815_p1));
    and_ln40_fu_659_p2 <= (icmp_ln40_fu_653_p2 and icmp18_fu_607_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter27, ap_block_state10_pp0_stage0_iter9, ap_block_state28_pp0_stage0_iter27)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_boolean_1 = ap_block_state28_pp0_stage0_iter27) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter27, ap_block_state2_io, ap_block_state10_pp0_stage0_iter9, ap_block_state22_io, ap_block_state23_io, ap_block_state28_pp0_stage0_iter27)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state28_pp0_stage0_iter27) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io)) or ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter27, ap_block_state2_io, ap_block_state10_pp0_stage0_iter9, ap_block_state22_io, ap_block_state23_io, ap_block_state28_pp0_stage0_iter27)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state28_pp0_stage0_iter27) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io)) or ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter9 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state22_io_assign_proc : process(gmem1_AWREADY, first_iter_0_reg_476_pp0_iter20_reg)
    begin
                ap_block_state22_io <= ((first_iter_0_reg_476_pp0_iter20_reg = ap_const_lv1_1) and (gmem1_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state23_io_assign_proc : process(gmem1_WREADY, and_ln40_reg_1145_pp0_iter21_reg)
    begin
                ap_block_state23_io <= ((gmem1_WREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter21_reg));
    end process;


    ap_block_state28_pp0_stage0_iter27_assign_proc : process(gmem1_BVALID, icmp_ln30_reg_1119_pp0_iter26_reg)
    begin
                ap_block_state28_pp0_stage0_iter27 <= ((icmp_ln30_reg_1119_pp0_iter26_reg = ap_const_lv1_1) and (gmem1_BVALID = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(gmem0_ARREADY, first_iter_0_reg_476)
    begin
                ap_block_state2_io <= ((first_iter_0_reg_476 = ap_const_lv1_1) and (gmem0_ARREADY = ap_const_logic_0));
    end process;


    ap_condition_1033_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1033 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_1576_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln30_reg_1119, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1576 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln30_reg_1119 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln30_fu_555_p2)
    begin
        if (((icmp_ln30_fu_555_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter27_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter27_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_icmp_ln3110_phi_fu_492_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln30_reg_1119_pp0_iter1_reg, icmp_ln31_reg_1149, ap_loop_init_pp0_iter1_reg)
    begin
        if (((icmp_ln30_reg_1119_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_icmp_ln3110_phi_fu_492_p4 <= icmp_ln31_reg_1149;
        elsif (((ap_loop_init_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_icmp_ln3110_phi_fu_492_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_icmp_ln3110_phi_fu_492_p4 <= icmp_ln31_reg_1149;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_indvar_flatten7_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten7_fu_144)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten7_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten7_load <= indvar_flatten7_fu_144;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten7_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten7_fu_144)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten7_load_1 <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten7_load_1 <= indvar_flatten7_fu_144;
        end if; 
    end process;

    col_fu_665_p2 <= std_logic_vector(unsigned(select_ln30_fu_581_p3) + unsigned(ap_const_lv8_1));
    gmem0_ARLEN <= ap_const_lv64_4000(32 - 1 downto 0);

    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_476, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_0_reg_476 = ap_const_lv1_1))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gmem0_RREADY <= ap_const_logic_1;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_476, m_axi_gmem0_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_0_reg_476 = ap_const_lv1_1))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem0_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    gmem1_AWLEN <= ap_const_lv64_3E04(32 - 1 downto 0);

    gmem1_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter21, first_iter_0_reg_476_pp0_iter20_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_iter_0_reg_476_pp0_iter20_reg = ap_const_lv1_1))) then 
            gmem1_AWVALID <= ap_const_logic_1;
        else 
            gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_BREADY_assign_proc : process(ap_enable_reg_pp0_iter27, icmp_ln30_reg_1119_pp0_iter26_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_1119_pp0_iter26_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            gmem1_BREADY <= ap_const_logic_1;
        else 
            gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_WVALID_assign_proc : process(ap_enable_reg_pp0_iter22, and_ln40_reg_1145_pp0_iter21_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter21_reg))) then 
            gmem1_WVALID <= ap_const_logic_1;
        else 
            gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter21, first_iter_0_reg_476_pp0_iter20_reg, m_axi_gmem1_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (first_iter_0_reg_476_pp0_iter20_reg = ap_const_lv1_1))) then 
            gmem1_blk_n_AW <= m_axi_gmem1_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter27, icmp_ln30_reg_1119_pp0_iter26_reg, m_axi_gmem1_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln30_reg_1119_pp0_iter26_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            gmem1_blk_n_B <= m_axi_gmem1_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter22, and_ln40_reg_1145_pp0_iter21_reg, m_axi_gmem1_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter21_reg))) then 
            gmem1_blk_n_W <= m_axi_gmem1_WREADY;
        else 
            gmem1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_637_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_637_ce <= ap_const_logic_1;
        else 
            grp_fu_637_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_637_p1 <= ap_const_lv8_3(3 - 1 downto 0);
    icmp18_fu_607_p2 <= "0" when (tmp_8_fu_597_p4 = ap_const_lv7_0) else "1";
    icmp_ln30_fu_555_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten7_load_1 = ap_const_lv14_3FFF) else "0";
    icmp_ln31_fu_671_p2 <= "1" when (col_fu_665_p2 = ap_const_lv8_80) else "0";
    icmp_ln40_fu_653_p2 <= "0" when (tmp_10_fu_643_p4 = ap_const_lv7_0) else "1";
    icmp_ln61_fu_1062_p2 <= "0" when (tmp_14_fu_1052_p4 = ap_const_lv3_0) else "1";

    linebuf_1_address0_local_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0, and_ln40_reg_1145_pp0_iter16_reg, trunc_ln31_1_reg_1172_pp0_iter16_reg, linebuf_1_addr_reg_1214_pp0_iter16_reg, zext_ln46_1_reg_1249_pp0_iter16_reg)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_2) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter16_reg))) then 
                linebuf_1_address0_local <= zext_ln46_1_reg_1249_pp0_iter16_reg(6 - 1 downto 0);
            elsif ((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_1)) then 
                linebuf_1_address0_local <= linebuf_1_addr_reg_1214_pp0_iter16_reg;
            else 
                linebuf_1_address0_local <= "XXXXXX";
            end if;
        else 
            linebuf_1_address0_local <= "XXXXXX";
        end if; 
    end process;

    linebuf_1_address1 <= zext_ln46_reg_1239_pp0_iter15_reg(6 - 1 downto 0);

    linebuf_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, and_ln40_reg_1145_pp0_iter16_reg, trunc_ln31_1_reg_1172_pp0_iter16_reg)
    begin
        if ((((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter16_reg)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            linebuf_1_ce0_local <= ap_const_logic_1;
        else 
            linebuf_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_1_ce1_local <= ap_const_logic_1;
        else 
            linebuf_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172_pp0_iter16_reg)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_1_we0_local <= ap_const_logic_1;
        else 
            linebuf_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_address0_local_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0, and_ln40_reg_1145_pp0_iter16_reg, trunc_ln31_1_reg_1172_pp0_iter16_reg, linebuf_2_addr_reg_1219_pp0_iter16_reg, zext_ln46_1_reg_1249_pp0_iter16_reg)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_0) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter16_reg))) then 
                linebuf_2_address0_local <= zext_ln46_1_reg_1249_pp0_iter16_reg(6 - 1 downto 0);
            elsif ((not((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_0)) and not((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_1)))) then 
                linebuf_2_address0_local <= linebuf_2_addr_reg_1219_pp0_iter16_reg;
            else 
                linebuf_2_address0_local <= "XXXXXX";
            end if;
        else 
            linebuf_2_address0_local <= "XXXXXX";
        end if; 
    end process;

    linebuf_2_address1 <= zext_ln46_reg_1239_pp0_iter15_reg(6 - 1 downto 0);

    linebuf_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, and_ln40_reg_1145_pp0_iter16_reg, trunc_ln31_1_reg_1172_pp0_iter16_reg)
    begin
        if ((((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter16_reg)) or (not((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_0)) and not((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            linebuf_2_ce0_local <= ap_const_logic_1;
        else 
            linebuf_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_2_ce1_local <= ap_const_logic_1;
        else 
            linebuf_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172_pp0_iter16_reg)
    begin
        if ((not((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_0)) and not((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_2_we0_local <= ap_const_logic_1;
        else 
            linebuf_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_3_address0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0, and_ln40_reg_1145_pp0_iter14_reg, trunc_ln31_1_reg_1172_pp0_iter14_reg, linebuf_3_addr_reg_1194_pp0_iter14_reg, zext_ln46_reg_1239_pp0_iter14_reg, zext_ln46_1_reg_1249_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg))) then 
                linebuf_3_address0_local <= zext_ln46_1_reg_1249_pp0_iter14_reg(6 - 1 downto 0);
            elsif (((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_2) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg))) then 
                linebuf_3_address0_local <= zext_ln46_reg_1239_pp0_iter14_reg(6 - 1 downto 0);
            elsif ((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0)) then 
                linebuf_3_address0_local <= linebuf_3_addr_reg_1194_pp0_iter14_reg;
            else 
                linebuf_3_address0_local <= "XXXXXX";
            end if;
        else 
            linebuf_3_address0_local <= "XXXXXX";
        end if; 
    end process;


    linebuf_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, and_ln40_reg_1145_pp0_iter14_reg, trunc_ln31_1_reg_1172_pp0_iter14_reg)
    begin
        if ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg)))) then 
            linebuf_3_ce0_local <= ap_const_logic_1;
        else 
            linebuf_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_3_we0_local <= ap_const_logic_1;
        else 
            linebuf_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_4_address0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0, and_ln40_reg_1145_pp0_iter14_reg, trunc_ln31_1_reg_1172_pp0_iter14_reg, linebuf_4_addr_reg_1199_pp0_iter14_reg, zext_ln46_reg_1239_pp0_iter14_reg, zext_ln46_1_reg_1249_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_2) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg))) then 
                linebuf_4_address0_local <= zext_ln46_1_reg_1249_pp0_iter14_reg(6 - 1 downto 0);
            elsif (((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg))) then 
                linebuf_4_address0_local <= zext_ln46_reg_1239_pp0_iter14_reg(6 - 1 downto 0);
            elsif ((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1)) then 
                linebuf_4_address0_local <= linebuf_4_addr_reg_1199_pp0_iter14_reg;
            else 
                linebuf_4_address0_local <= "XXXXXX";
            end if;
        else 
            linebuf_4_address0_local <= "XXXXXX";
        end if; 
    end process;


    linebuf_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, and_ln40_reg_1145_pp0_iter14_reg, trunc_ln31_1_reg_1172_pp0_iter14_reg)
    begin
        if ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg)))) then 
            linebuf_4_ce0_local <= ap_const_logic_1;
        else 
            linebuf_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_4_we0_local <= ap_const_logic_1;
        else 
            linebuf_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_5_address0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0, and_ln40_reg_1145_pp0_iter14_reg, trunc_ln31_1_reg_1172_pp0_iter14_reg, linebuf_5_addr_reg_1204_pp0_iter14_reg, zext_ln46_reg_1239_pp0_iter14_reg, zext_ln46_1_reg_1249_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg))) then 
            linebuf_5_address0_local <= zext_ln46_1_reg_1249_pp0_iter14_reg(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg))) then 
            linebuf_5_address0_local <= zext_ln46_reg_1239_pp0_iter14_reg(6 - 1 downto 0);
        elsif ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or (not((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1)) and not((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            linebuf_5_address0_local <= linebuf_5_addr_reg_1204_pp0_iter14_reg;
        else 
            linebuf_5_address0_local <= "XXXXXX";
        end if; 
    end process;


    linebuf_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, and_ln40_reg_1145_pp0_iter14_reg, trunc_ln31_1_reg_1172_pp0_iter14_reg)
    begin
        if ((((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter14_reg)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1)) and not((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            linebuf_5_ce0_local <= ap_const_logic_1;
        else 
            linebuf_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172_pp0_iter14_reg)
    begin
        if ((not((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_1)) and not((trunc_ln31_1_reg_1172_pp0_iter14_reg = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_5_we0_local <= ap_const_logic_1;
        else 
            linebuf_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_6_address0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0, trunc_ln31_1_reg_1172, and_ln40_reg_1145_pp0_iter12_reg, zext_ln46_fu_762_p1, zext_ln46_1_fu_768_p1, zext_ln31_fu_750_p1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((trunc_ln31_1_reg_1172 = ap_const_lv2_1) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg))) then 
                linebuf_6_address0_local <= zext_ln46_1_fu_768_p1(6 - 1 downto 0);
            elsif (((trunc_ln31_1_reg_1172 = ap_const_lv2_2) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg))) then 
                linebuf_6_address0_local <= zext_ln46_fu_762_p1(6 - 1 downto 0);
            elsif ((trunc_ln31_1_reg_1172 = ap_const_lv2_0)) then 
                linebuf_6_address0_local <= zext_ln31_fu_750_p1(6 - 1 downto 0);
            else 
                linebuf_6_address0_local <= "XXXXXX";
            end if;
        else 
            linebuf_6_address0_local <= "XXXXXX";
        end if; 
    end process;


    linebuf_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172, and_ln40_reg_1145_pp0_iter12_reg)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg)))) then 
            linebuf_6_ce0_local <= ap_const_logic_1;
        else 
            linebuf_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_6_we0_local <= ap_const_logic_1;
        else 
            linebuf_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_7_address0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0, trunc_ln31_1_reg_1172, and_ln40_reg_1145_pp0_iter12_reg, zext_ln46_fu_762_p1, zext_ln46_1_fu_768_p1, zext_ln31_fu_750_p1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((trunc_ln31_1_reg_1172 = ap_const_lv2_2) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg))) then 
                linebuf_7_address0_local <= zext_ln46_1_fu_768_p1(6 - 1 downto 0);
            elsif (((trunc_ln31_1_reg_1172 = ap_const_lv2_0) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg))) then 
                linebuf_7_address0_local <= zext_ln46_fu_762_p1(6 - 1 downto 0);
            elsif ((trunc_ln31_1_reg_1172 = ap_const_lv2_1)) then 
                linebuf_7_address0_local <= zext_ln31_fu_750_p1(6 - 1 downto 0);
            else 
                linebuf_7_address0_local <= "XXXXXX";
            end if;
        else 
            linebuf_7_address0_local <= "XXXXXX";
        end if; 
    end process;


    linebuf_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172, and_ln40_reg_1145_pp0_iter12_reg)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg)))) then 
            linebuf_7_ce0_local <= ap_const_logic_1;
        else 
            linebuf_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_7_we0_local <= ap_const_logic_1;
        else 
            linebuf_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_8_address0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0, trunc_ln31_1_reg_1172, and_ln40_reg_1145_pp0_iter12_reg, zext_ln46_fu_762_p1, zext_ln46_1_fu_768_p1, zext_ln31_fu_750_p1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg))) then 
            linebuf_8_address0_local <= zext_ln46_1_fu_768_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg))) then 
            linebuf_8_address0_local <= zext_ln46_fu_762_p1(6 - 1 downto 0);
        elsif ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or (not((trunc_ln31_1_reg_1172 = ap_const_lv2_1)) and not((trunc_ln31_1_reg_1172 = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            linebuf_8_address0_local <= zext_ln31_fu_750_p1(6 - 1 downto 0);
        else 
            linebuf_8_address0_local <= "XXXXXX";
        end if; 
    end process;


    linebuf_8_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172, and_ln40_reg_1145_pp0_iter12_reg)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter12_reg)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln31_1_reg_1172 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not((trunc_ln31_1_reg_1172 = ap_const_lv2_1)) and not((trunc_ln31_1_reg_1172 = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            linebuf_8_ce0_local <= ap_const_logic_1;
        else 
            linebuf_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_8_we0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172)
    begin
        if ((not((trunc_ln31_1_reg_1172 = ap_const_lv2_1)) and not((trunc_ln31_1_reg_1172 = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_8_we0_local <= ap_const_logic_1;
        else 
            linebuf_8_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_address0_local_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0, and_ln40_reg_1145_pp0_iter16_reg, trunc_ln31_1_reg_1172_pp0_iter16_reg, linebuf_addr_reg_1209_pp0_iter16_reg, zext_ln46_1_reg_1249_pp0_iter16_reg)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_1) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter16_reg))) then 
                linebuf_address0_local <= zext_ln46_1_reg_1249_pp0_iter16_reg(6 - 1 downto 0);
            elsif ((trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_0)) then 
                linebuf_address0_local <= linebuf_addr_reg_1209_pp0_iter16_reg;
            else 
                linebuf_address0_local <= "XXXXXX";
            end if;
        else 
            linebuf_address0_local <= "XXXXXX";
        end if; 
    end process;

    linebuf_address1 <= zext_ln46_reg_1239_pp0_iter15_reg(6 - 1 downto 0);

    linebuf_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, and_ln40_reg_1145_pp0_iter16_reg, trunc_ln31_1_reg_1172_pp0_iter16_reg)
    begin
        if ((((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln40_reg_1145_pp0_iter16_reg)))) then 
            linebuf_ce0_local <= ap_const_logic_1;
        else 
            linebuf_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_ce1_local <= ap_const_logic_1;
        else 
            linebuf_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_we0_local_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln31_1_reg_1172_pp0_iter16_reg)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln31_1_reg_1172_pp0_iter16_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_we0_local <= ap_const_logic_1;
        else 
            linebuf_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln31_fu_621_p0 <= mul_ln31_fu_621_p00(8 - 1 downto 0);
    mul_ln31_fu_621_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_fu_581_p3),17));
    mul_ln31_fu_621_p1 <= ap_const_lv17_156(10 - 1 downto 0);
    mul_ln46_1_fu_734_p0 <= mul_ln46_1_fu_734_p00(7 - 1 downto 0);
    mul_ln46_1_fu_734_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_1_reg_1167),15));
    mul_ln46_1_fu_734_p1 <= ap_const_lv15_AB(9 - 1 downto 0);
    mul_ln46_fu_715_p0 <= mul_ln46_fu_715_p00(7 - 1 downto 0);
    mul_ln46_fu_715_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_reg_1162),15));
    mul_ln46_fu_715_p1 <= ap_const_lv15_AB(9 - 1 downto 0);
    row_fu_589_p3 <= 
        add_ln3011_fu_156 when (ap_phi_mux_icmp_ln3110_phi_fu_492_p4(0) = '1') else 
        row8_fu_148;
    select_ln30_fu_581_p3 <= 
        ap_const_lv8_0 when (ap_phi_mux_icmp_ln3110_phi_fu_492_p4(0) = '1') else 
        col9_fu_152;
    select_ln63_fu_1072_p3 <= 
        ap_const_lv8_FF when (icmp_ln61_fu_1062_p2(0) = '1') else 
        trunc_ln63_fu_1068_p1;
    shl_ln_fu_996_p3 <= (tmp_5_reg_1390 & ap_const_lv3_0);
    sub_ln55_fu_1010_p2 <= std_logic_vector(unsigned(zext_ln50_fu_1003_p1) - unsigned(zext_ln55_12_fu_1007_p1));
    sum_2_fu_1046_p3 <= 
        ap_const_lv11_0 when (tmp_13_reg_1405(0) = '1') else 
        trunc_ln50_reg_1400;
    sum_3_fu_1016_p2 <= std_logic_vector(unsigned(sub_ln55_fu_1010_p2) - unsigned(zext_ln55_5_fu_988_p1));
    sum_fu_1022_p2 <= std_logic_vector(unsigned(sum_3_fu_1016_p2) - unsigned(zext_ln55_6_fu_992_p1));
    tmp_10_fu_643_p4 <= select_ln30_fu_581_p3(7 downto 1);
    tmp_14_fu_1052_p4 <= sum_2_fu_1046_p3(10 downto 8);
    tmp_1_fu_774_p7 <= "XXXXXXXX";
    tmp_2_fu_889_p7 <= "XXXXXXXX";
    tmp_3_fu_837_p7 <= "XXXXXXXX";
    tmp_4_fu_856_p7 <= "XXXXXXXX";
    tmp_5_fu_905_p7 <= "XXXXXXXX";
    tmp_6_fu_950_p7 <= "XXXXXXXX";
    tmp_7_fu_969_p7 <= "XXXXXXXX";
    tmp_8_fu_597_p4 <= row_fu_589_p3(7 downto 1);
    tmp_fu_793_p7 <= "XXXXXXXX";
    trunc_ln31_1_fu_708_p1 <= grp_fu_637_p2(2 - 1 downto 0);
    trunc_ln31_fu_613_p1 <= select_ln30_fu_581_p3(7 - 1 downto 0);
    trunc_ln50_fu_1028_p1 <= sum_fu_1022_p2(11 - 1 downto 0);
    trunc_ln63_fu_1068_p1 <= sum_2_fu_1046_p3(8 - 1 downto 0);
    zext_ln31_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1140_pp0_iter12_reg),64));
    zext_ln46_1_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_1189),64));
    zext_ln46_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1184),64));
    zext_ln50_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_996_p3),12));
    zext_ln55_10_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_2_reg_1385),10));
    zext_ln55_11_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_3_fu_934_p2),11));
    zext_ln55_12_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_4_reg_1395),12));
    zext_ln55_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_837_p9),9));
    zext_ln55_2_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1327),9));
    zext_ln55_3_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_856_p9),9));
    zext_ln55_4_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1289_pp0_iter16_reg),9));
    zext_ln55_5_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_950_p9),12));
    zext_ln55_6_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_969_p9),12));
    zext_ln55_7_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem0_addr_read_reg_1154_pp0_iter16_reg),10));
    zext_ln55_8_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_fu_821_p2),10));
    zext_ln55_9_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_1_reg_1380_pp0_iter18_reg),11));
    zext_ln55_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_889_p9),10));
end behav;
