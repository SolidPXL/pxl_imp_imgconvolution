-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_edge is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv2d_edge is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d_edge_conv2d_edge,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.840000,HLS_SYN_LAT=65555,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=2455,HLS_SYN_LUT=2488,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv64_10000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_FC04 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001111110000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal first_iter_0_reg_263 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal gmem1_AWVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_WVALID : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BREADY : STD_LOGIC;
    signal first_iter_0_reg_263_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_io : BOOLEAN;
    signal and_ln42_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_io : BOOLEAN;
    signal icmp_ln32_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln32_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal gmem1_blk_n_W : STD_LOGIC;
    signal gmem1_blk_n_B : STD_LOGIC;
    signal first_iter_0_reg_263_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_263_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_263_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_263_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_263_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_263_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_263_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_263_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_263_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_263_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal output_r_read_reg_598 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_read_reg_598_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_read_reg_603 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln32_reg_608_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_608_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln33_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_reg_618 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_reg_618_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln33_fu_382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_addr_reg_628 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_addr_reg_628_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_addr_reg_634 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_addr_reg_634_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_addr_reg_634_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_addr_reg_634_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_addr_reg_634_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_addr_reg_634_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_addr_reg_634_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_addr_reg_634_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_addr_reg_634_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln42_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_reg_640_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal linebuf_1_load_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_load_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln48_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_661 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_661_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_661_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_661_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_661_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_661_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_661_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal linebuf_1_load_1_reg_672 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_1_reg_672_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_1_reg_672_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_1_reg_672_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_1_reg_672_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_1_reg_672_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_1_reg_672_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_1_reg_672_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_fu_457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_reg_677 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_reg_677_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_reg_677_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_reg_677_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_reg_677_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_reg_677_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln57_reg_677_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_addr_read_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_load_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_load_1_reg_703 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_1_fu_469_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln57_1_reg_708 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln61_fu_509_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln61_reg_713 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_fu_561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln66_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_2_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_icmp_ln335_phi_fu_279_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal indvar_flatten2_fu_118 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln32_1_fu_309_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten2_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten2_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal row3_fu_122 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal row_fu_352_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal col4_fu_126 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal col_fu_408_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln326_fu_130 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln32_fu_420_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal linebuf_1_ce2_local : STD_LOGIC;
    signal linebuf_1_ce1_local : STD_LOGIC;
    signal linebuf_1_we0_local : STD_LOGIC;
    signal linebuf_1_ce0_local : STD_LOGIC;
    signal linebuf_2_ce2_local : STD_LOGIC;
    signal linebuf_2_ce1_local : STD_LOGIC;
    signal linebuf_2_we0_local : STD_LOGIC;
    signal linebuf_2_ce0_local : STD_LOGIC;
    signal linebuf_we0_local : STD_LOGIC;
    signal linebuf_ce0_local : STD_LOGIC;
    signal linebuf_ce1_local : STD_LOGIC;
    signal tmp_fu_360_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_fu_344_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_386_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp10_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln57_1_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln57_2_fu_454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln57_4_fu_466_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln57_3_fu_463_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln57_fu_475_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln57_5_fu_478_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln57_6_fu_487_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln61_fu_490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln61_1_fu_493_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln61_1_fu_499_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln57_fu_481_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln61_fu_503_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_fu_527_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum_1_fu_534_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_541_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln64_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln66_fu_557_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_1003 : BOOLEAN;
    signal ap_condition_731 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component conv2d_edge_linebuf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2d_edge_linebuf_1_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv2d_edge_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component conv2d_edge_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component conv2d_edge_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component conv2d_edge_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    linebuf_U : component conv2d_edge_linebuf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_address0,
        ce0 => linebuf_ce0_local,
        we0 => linebuf_we0_local,
        d0 => linebuf_1_load_reg_649,
        address1 => linebuf_address1,
        ce1 => linebuf_ce1_local,
        q1 => linebuf_q1);

    linebuf_1_U : component conv2d_edge_linebuf_1_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_1_addr_reg_628_pp0_iter2_reg,
        ce0 => linebuf_1_ce0_local,
        we0 => linebuf_1_we0_local,
        d0 => linebuf_2_load_reg_655,
        address1 => linebuf_1_address1,
        ce1 => linebuf_1_ce1_local,
        q1 => linebuf_1_q1,
        address2 => linebuf_1_address2,
        ce2 => linebuf_1_ce2_local,
        q2 => linebuf_1_q2);

    linebuf_2_U : component conv2d_edge_linebuf_1_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_2_addr_reg_634_pp0_iter9_reg,
        ce0 => linebuf_2_ce0_local,
        we0 => linebuf_2_we0_local,
        d0 => gmem0_addr_read_reg_682,
        address1 => linebuf_2_address1,
        ce1 => linebuf_2_ce1_local,
        q1 => linebuf_2_q1,
        address2 => linebuf_2_address2,
        ce2 => linebuf_2_ce2_local,
        q2 => linebuf_2_q2);

    control_s_axi_U : component conv2d_edge_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component conv2d_edge_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 8,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => gmem0_ARVALID,
        I_CH0_ARREADY => gmem0_ARREADY,
        I_CH0_ARADDR => input_r_read_reg_603,
        I_CH0_ARLEN => gmem0_ARLEN,
        I_CH0_RVALID => gmem0_RVALID,
        I_CH0_RREADY => gmem0_RREADY,
        I_CH0_RDATA => gmem0_RDATA,
        I_CH0_RFIFONUM => gmem0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => gmem0_AWREADY,
        I_CH0_AWADDR => ap_const_lv64_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => gmem0_WREADY,
        I_CH0_WDATA => ap_const_lv8_0,
        I_CH0_WSTRB => ap_const_lv1_0,
        I_CH0_BVALID => gmem0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    gmem1_m_axi_U : component conv2d_edge_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 8,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 0,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => ap_const_logic_0,
        I_CH0_ARREADY => gmem1_ARREADY,
        I_CH0_ARADDR => ap_const_lv64_0,
        I_CH0_ARLEN => ap_const_lv32_0,
        I_CH0_RVALID => gmem1_RVALID,
        I_CH0_RREADY => ap_const_logic_0,
        I_CH0_RDATA => gmem1_RDATA,
        I_CH0_RFIFONUM => gmem1_RFIFONUM,
        I_CH0_AWVALID => gmem1_AWVALID,
        I_CH0_AWREADY => gmem1_AWREADY,
        I_CH0_AWADDR => output_r_read_reg_598_pp0_iter11_reg,
        I_CH0_AWLEN => gmem1_AWLEN,
        I_CH0_WVALID => gmem1_WVALID,
        I_CH0_WREADY => gmem1_WREADY,
        I_CH0_WDATA => select_ln66_reg_729,
        I_CH0_WSTRB => ap_const_lv1_1,
        I_CH0_BVALID => gmem1_BVALID,
        I_CH0_BREADY => gmem1_BREADY);

    flow_control_loop_delay_pipe_U : component conv2d_edge_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    add_ln326_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    add_ln326_fu_130 <= ap_const_lv9_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add_ln326_fu_130 <= add_ln32_fu_420_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter18_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
            end if; 
        end if;
    end process;

    col4_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    col4_fu_126 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    col4_fu_126 <= col_fu_408_p2;
                end if;
            end if; 
        end if;
    end process;

    first_iter_0_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_1003)) then 
                    first_iter_0_reg_263 <= ap_const_lv1_0;
                elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    first_iter_0_reg_263 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten2_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_731)) then
                indvar_flatten2_fu_118 <= add_ln32_1_fu_309_p2;
            end if;
        end if;
    end process;

    row3_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    row3_fu_122 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    row3_fu_122 <= row_fu_352_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln57_1_reg_708 <= add_ln57_1_fu_469_p2;
                add_ln57_reg_677 <= add_ln57_fu_457_p2;
                add_ln57_reg_677_pp0_iter4_reg <= add_ln57_reg_677;
                add_ln57_reg_677_pp0_iter5_reg <= add_ln57_reg_677_pp0_iter4_reg;
                add_ln57_reg_677_pp0_iter6_reg <= add_ln57_reg_677_pp0_iter5_reg;
                add_ln57_reg_677_pp0_iter7_reg <= add_ln57_reg_677_pp0_iter6_reg;
                add_ln57_reg_677_pp0_iter8_reg <= add_ln57_reg_677_pp0_iter7_reg;
                add_ln57_reg_677_pp0_iter9_reg <= add_ln57_reg_677_pp0_iter8_reg;
                and_ln42_reg_640_pp0_iter10_reg <= and_ln42_reg_640_pp0_iter9_reg;
                and_ln42_reg_640_pp0_iter11_reg <= and_ln42_reg_640_pp0_iter10_reg;
                and_ln42_reg_640_pp0_iter12_reg <= and_ln42_reg_640_pp0_iter11_reg;
                and_ln42_reg_640_pp0_iter2_reg <= and_ln42_reg_640;
                and_ln42_reg_640_pp0_iter3_reg <= and_ln42_reg_640_pp0_iter2_reg;
                and_ln42_reg_640_pp0_iter4_reg <= and_ln42_reg_640_pp0_iter3_reg;
                and_ln42_reg_640_pp0_iter5_reg <= and_ln42_reg_640_pp0_iter4_reg;
                and_ln42_reg_640_pp0_iter6_reg <= and_ln42_reg_640_pp0_iter5_reg;
                and_ln42_reg_640_pp0_iter7_reg <= and_ln42_reg_640_pp0_iter6_reg;
                and_ln42_reg_640_pp0_iter8_reg <= and_ln42_reg_640_pp0_iter7_reg;
                and_ln42_reg_640_pp0_iter9_reg <= and_ln42_reg_640_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                first_iter_0_reg_263_pp0_iter10_reg <= first_iter_0_reg_263_pp0_iter9_reg;
                first_iter_0_reg_263_pp0_iter11_reg <= first_iter_0_reg_263_pp0_iter10_reg;
                first_iter_0_reg_263_pp0_iter2_reg <= first_iter_0_reg_263_pp0_iter1_reg;
                first_iter_0_reg_263_pp0_iter3_reg <= first_iter_0_reg_263_pp0_iter2_reg;
                first_iter_0_reg_263_pp0_iter4_reg <= first_iter_0_reg_263_pp0_iter3_reg;
                first_iter_0_reg_263_pp0_iter5_reg <= first_iter_0_reg_263_pp0_iter4_reg;
                first_iter_0_reg_263_pp0_iter6_reg <= first_iter_0_reg_263_pp0_iter5_reg;
                first_iter_0_reg_263_pp0_iter7_reg <= first_iter_0_reg_263_pp0_iter6_reg;
                first_iter_0_reg_263_pp0_iter8_reg <= first_iter_0_reg_263_pp0_iter7_reg;
                first_iter_0_reg_263_pp0_iter9_reg <= first_iter_0_reg_263_pp0_iter8_reg;
                gmem0_addr_read_reg_682 <= gmem0_RDATA;
                icmp_ln32_reg_608_pp0_iter10_reg <= icmp_ln32_reg_608_pp0_iter9_reg;
                icmp_ln32_reg_608_pp0_iter11_reg <= icmp_ln32_reg_608_pp0_iter10_reg;
                icmp_ln32_reg_608_pp0_iter12_reg <= icmp_ln32_reg_608_pp0_iter11_reg;
                icmp_ln32_reg_608_pp0_iter13_reg <= icmp_ln32_reg_608_pp0_iter12_reg;
                icmp_ln32_reg_608_pp0_iter14_reg <= icmp_ln32_reg_608_pp0_iter13_reg;
                icmp_ln32_reg_608_pp0_iter15_reg <= icmp_ln32_reg_608_pp0_iter14_reg;
                icmp_ln32_reg_608_pp0_iter16_reg <= icmp_ln32_reg_608_pp0_iter15_reg;
                icmp_ln32_reg_608_pp0_iter17_reg <= icmp_ln32_reg_608_pp0_iter16_reg;
                icmp_ln32_reg_608_pp0_iter2_reg <= icmp_ln32_reg_608_pp0_iter1_reg;
                icmp_ln32_reg_608_pp0_iter3_reg <= icmp_ln32_reg_608_pp0_iter2_reg;
                icmp_ln32_reg_608_pp0_iter4_reg <= icmp_ln32_reg_608_pp0_iter3_reg;
                icmp_ln32_reg_608_pp0_iter5_reg <= icmp_ln32_reg_608_pp0_iter4_reg;
                icmp_ln32_reg_608_pp0_iter6_reg <= icmp_ln32_reg_608_pp0_iter5_reg;
                icmp_ln32_reg_608_pp0_iter7_reg <= icmp_ln32_reg_608_pp0_iter6_reg;
                icmp_ln32_reg_608_pp0_iter8_reg <= icmp_ln32_reg_608_pp0_iter7_reg;
                icmp_ln32_reg_608_pp0_iter9_reg <= icmp_ln32_reg_608_pp0_iter8_reg;
                linebuf_1_addr_reg_628_pp0_iter2_reg <= linebuf_1_addr_reg_628;
                linebuf_1_load_1_reg_672_pp0_iter10_reg <= linebuf_1_load_1_reg_672_pp0_iter9_reg;
                linebuf_1_load_1_reg_672_pp0_iter4_reg <= linebuf_1_load_1_reg_672;
                linebuf_1_load_1_reg_672_pp0_iter5_reg <= linebuf_1_load_1_reg_672_pp0_iter4_reg;
                linebuf_1_load_1_reg_672_pp0_iter6_reg <= linebuf_1_load_1_reg_672_pp0_iter5_reg;
                linebuf_1_load_1_reg_672_pp0_iter7_reg <= linebuf_1_load_1_reg_672_pp0_iter6_reg;
                linebuf_1_load_1_reg_672_pp0_iter8_reg <= linebuf_1_load_1_reg_672_pp0_iter7_reg;
                linebuf_1_load_1_reg_672_pp0_iter9_reg <= linebuf_1_load_1_reg_672_pp0_iter8_reg;
                linebuf_2_addr_reg_634_pp0_iter2_reg <= linebuf_2_addr_reg_634;
                linebuf_2_addr_reg_634_pp0_iter3_reg <= linebuf_2_addr_reg_634_pp0_iter2_reg;
                linebuf_2_addr_reg_634_pp0_iter4_reg <= linebuf_2_addr_reg_634_pp0_iter3_reg;
                linebuf_2_addr_reg_634_pp0_iter5_reg <= linebuf_2_addr_reg_634_pp0_iter4_reg;
                linebuf_2_addr_reg_634_pp0_iter6_reg <= linebuf_2_addr_reg_634_pp0_iter5_reg;
                linebuf_2_addr_reg_634_pp0_iter7_reg <= linebuf_2_addr_reg_634_pp0_iter6_reg;
                linebuf_2_addr_reg_634_pp0_iter8_reg <= linebuf_2_addr_reg_634_pp0_iter7_reg;
                linebuf_2_addr_reg_634_pp0_iter9_reg <= linebuf_2_addr_reg_634_pp0_iter8_reg;
                output_r_read_reg_598_pp0_iter10_reg <= output_r_read_reg_598_pp0_iter9_reg;
                output_r_read_reg_598_pp0_iter11_reg <= output_r_read_reg_598_pp0_iter10_reg;
                output_r_read_reg_598_pp0_iter2_reg <= output_r_read_reg_598_pp0_iter1_reg;
                output_r_read_reg_598_pp0_iter3_reg <= output_r_read_reg_598_pp0_iter2_reg;
                output_r_read_reg_598_pp0_iter4_reg <= output_r_read_reg_598_pp0_iter3_reg;
                output_r_read_reg_598_pp0_iter5_reg <= output_r_read_reg_598_pp0_iter4_reg;
                output_r_read_reg_598_pp0_iter6_reg <= output_r_read_reg_598_pp0_iter5_reg;
                output_r_read_reg_598_pp0_iter7_reg <= output_r_read_reg_598_pp0_iter6_reg;
                output_r_read_reg_598_pp0_iter8_reg <= output_r_read_reg_598_pp0_iter7_reg;
                output_r_read_reg_598_pp0_iter9_reg <= output_r_read_reg_598_pp0_iter8_reg;
                select_ln66_reg_729 <= select_ln66_fu_561_p3;
                tmp_2_reg_718 <= add_ln61_fu_503_p2(10 downto 10);
                trunc_ln61_reg_713 <= trunc_ln61_fu_509_p1;
                    zext_ln33_reg_618_pp0_iter2_reg(8 downto 0) <= zext_ln33_reg_618(8 downto 0);
                    zext_ln48_reg_661(7 downto 0) <= zext_ln48_fu_446_p1(7 downto 0);
                    zext_ln48_reg_661_pp0_iter3_reg(7 downto 0) <= zext_ln48_reg_661(7 downto 0);
                    zext_ln48_reg_661_pp0_iter4_reg(7 downto 0) <= zext_ln48_reg_661_pp0_iter3_reg(7 downto 0);
                    zext_ln48_reg_661_pp0_iter5_reg(7 downto 0) <= zext_ln48_reg_661_pp0_iter4_reg(7 downto 0);
                    zext_ln48_reg_661_pp0_iter6_reg(7 downto 0) <= zext_ln48_reg_661_pp0_iter5_reg(7 downto 0);
                    zext_ln48_reg_661_pp0_iter7_reg(7 downto 0) <= zext_ln48_reg_661_pp0_iter6_reg(7 downto 0);
                    zext_ln48_reg_661_pp0_iter8_reg(7 downto 0) <= zext_ln48_reg_661_pp0_iter7_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln42_reg_640 <= and_ln42_fu_402_p2;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                first_iter_0_reg_263_pp0_iter1_reg <= first_iter_0_reg_263;
                icmp_ln32_reg_608 <= icmp_ln32_fu_318_p2;
                icmp_ln32_reg_608_pp0_iter1_reg <= icmp_ln32_reg_608;
                input_r_read_reg_603 <= input_r;
                linebuf_1_addr_reg_628 <= zext_ln33_fu_376_p1(8 - 1 downto 0);
                linebuf_2_addr_reg_634 <= zext_ln33_fu_376_p1(8 - 1 downto 0);
                output_r_read_reg_598 <= output_r;
                output_r_read_reg_598_pp0_iter1_reg <= output_r_read_reg_598;
                trunc_ln33_reg_623 <= trunc_ln33_fu_382_p1;
                    zext_ln33_reg_618(8 downto 0) <= zext_ln33_fu_376_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln33_reg_644 <= icmp_ln33_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                linebuf_1_load_1_reg_672 <= linebuf_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                linebuf_1_load_reg_649 <= linebuf_1_q2;
                linebuf_2_load_reg_655 <= linebuf_2_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                linebuf_2_load_1_reg_703 <= linebuf_2_q1;
                linebuf_load_reg_698 <= linebuf_q1;
            end if;
        end if;
    end process;
    zext_ln33_reg_618(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln33_reg_618_pp0_iter2_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln48_reg_661(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln48_reg_661_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln48_reg_661_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln48_reg_661_pp0_iter5_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln48_reg_661_pp0_iter6_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln48_reg_661_pp0_iter7_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln48_reg_661_pp0_iter8_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln32_1_fu_309_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten2_load) + unsigned(ap_const_lv16_1));
    add_ln32_fu_420_p2 <= std_logic_vector(unsigned(row_fu_352_p3) + unsigned(ap_const_lv9_1));
    add_ln57_1_fu_469_p2 <= std_logic_vector(unsigned(zext_ln57_4_fu_466_p1) + unsigned(zext_ln57_3_fu_463_p1));
    add_ln57_fu_457_p2 <= std_logic_vector(unsigned(zext_ln57_1_fu_451_p1) + unsigned(zext_ln57_2_fu_454_p1));
    add_ln61_1_fu_493_p2 <= std_logic_vector(unsigned(zext_ln57_6_fu_487_p1) + unsigned(zext_ln61_fu_490_p1));
    add_ln61_fu_503_p2 <= std_logic_vector(unsigned(zext_ln61_1_fu_499_p1) + unsigned(sub_ln57_fu_481_p2));
    and_ln42_fu_402_p2 <= (icmp_ln42_fu_396_p2 and icmp10_fu_370_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter18, ap_block_state10_pp0_stage0_iter9, ap_block_state19_pp0_stage0_iter18)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state19_pp0_stage0_iter18)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter18, ap_block_state2_io, ap_block_state10_pp0_stage0_iter9, ap_block_state13_io, ap_block_state14_io, ap_block_state19_pp0_stage0_iter18)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state19_pp0_stage0_iter18)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_io)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter18, ap_block_state2_io, ap_block_state10_pp0_stage0_iter9, ap_block_state13_io, ap_block_state14_io, ap_block_state19_pp0_stage0_iter18)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state19_pp0_stage0_iter18)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_io)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(gmem0_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter9 <= (gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state13_io_assign_proc : process(gmem1_AWREADY, first_iter_0_reg_263_pp0_iter11_reg)
    begin
                ap_block_state13_io <= ((first_iter_0_reg_263_pp0_iter11_reg = ap_const_lv1_1) and (gmem1_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state14_io_assign_proc : process(gmem1_WREADY, and_ln42_reg_640_pp0_iter12_reg)
    begin
                ap_block_state14_io <= ((gmem1_WREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln42_reg_640_pp0_iter12_reg));
    end process;


    ap_block_state19_pp0_stage0_iter18_assign_proc : process(gmem1_BVALID, icmp_ln32_reg_608_pp0_iter17_reg)
    begin
                ap_block_state19_pp0_stage0_iter18 <= ((icmp_ln32_reg_608_pp0_iter17_reg = ap_const_lv1_1) and (gmem1_BVALID = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(gmem0_ARREADY, first_iter_0_reg_263)
    begin
                ap_block_state2_io <= ((first_iter_0_reg_263 = ap_const_lv1_1) and (gmem0_ARREADY = ap_const_logic_0));
    end process;


    ap_condition_1003_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln32_reg_608, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1003 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_608 = ap_const_lv1_0));
    end process;


    ap_condition_731_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_731 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln32_fu_318_p2)
    begin
        if (((icmp_ln32_fu_318_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter18_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_icmp_ln335_phi_fu_279_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln32_reg_608_pp0_iter1_reg, icmp_ln33_reg_644, ap_loop_init_pp0_iter1_reg)
    begin
        if (((icmp_ln32_reg_608_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_icmp_ln335_phi_fu_279_p4 <= icmp_ln33_reg_644;
        elsif (((ap_loop_init_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_icmp_ln335_phi_fu_279_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_icmp_ln335_phi_fu_279_p4 <= icmp_ln33_reg_644;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_indvar_flatten2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten2_fu_118)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten2_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten2_load <= indvar_flatten2_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten2_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten2_fu_118)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten2_load_1 <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten2_load_1 <= indvar_flatten2_fu_118;
        end if; 
    end process;

    col_fu_408_p2 <= std_logic_vector(unsigned(select_ln32_fu_344_p3) + unsigned(ap_const_lv9_1));
    empty_20_fu_441_p2 <= std_logic_vector(unsigned(trunc_ln33_reg_623) + unsigned(ap_const_lv8_FE));
    gmem0_ARLEN <= ap_const_lv64_10000(32 - 1 downto 0);

    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_263, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_0_reg_263 = ap_const_lv1_1))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gmem0_RREADY <= ap_const_logic_1;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_263, m_axi_gmem0_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_iter_0_reg_263 = ap_const_lv1_1))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem0_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    gmem1_AWLEN <= ap_const_lv64_FC04(32 - 1 downto 0);

    gmem1_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter12, first_iter_0_reg_263_pp0_iter11_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_iter_0_reg_263_pp0_iter11_reg = ap_const_lv1_1))) then 
            gmem1_AWVALID <= ap_const_logic_1;
        else 
            gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_BREADY_assign_proc : process(ap_enable_reg_pp0_iter18, icmp_ln32_reg_608_pp0_iter17_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_608_pp0_iter17_reg = ap_const_lv1_1))) then 
            gmem1_BREADY <= ap_const_logic_1;
        else 
            gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_WVALID_assign_proc : process(ap_enable_reg_pp0_iter13, and_ln42_reg_640_pp0_iter12_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln42_reg_640_pp0_iter12_reg))) then 
            gmem1_WVALID <= ap_const_logic_1;
        else 
            gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter12, first_iter_0_reg_263_pp0_iter11_reg, m_axi_gmem1_AWREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (first_iter_0_reg_263_pp0_iter11_reg = ap_const_lv1_1))) then 
            gmem1_blk_n_AW <= m_axi_gmem1_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter18, icmp_ln32_reg_608_pp0_iter17_reg, m_axi_gmem1_BVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln32_reg_608_pp0_iter17_reg = ap_const_lv1_1))) then 
            gmem1_blk_n_B <= m_axi_gmem1_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter13, and_ln42_reg_640_pp0_iter12_reg, m_axi_gmem1_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln42_reg_640_pp0_iter12_reg))) then 
            gmem1_blk_n_W <= m_axi_gmem1_WREADY;
        else 
            gmem1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp10_fu_370_p2 <= "0" when (tmp_fu_360_p4 = ap_const_lv8_0) else "1";
    icmp_ln32_fu_318_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten2_load_1 = ap_const_lv16_FFFF) else "0";
    icmp_ln33_fu_414_p2 <= "1" when (col_fu_408_p2 = ap_const_lv9_100) else "0";
    icmp_ln42_fu_396_p2 <= "0" when (tmp_1_fu_386_p4 = ap_const_lv8_0) else "1";
    icmp_ln64_fu_551_p2 <= "0" when (tmp_3_fu_541_p4 = ap_const_lv5_0) else "1";
    linebuf_1_address1 <= zext_ln48_fu_446_p1(8 - 1 downto 0);
    linebuf_1_address2 <= zext_ln33_fu_376_p1(8 - 1 downto 0);

    linebuf_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_1_ce0_local <= ap_const_logic_1;
        else 
            linebuf_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_1_ce1_local <= ap_const_logic_1;
        else 
            linebuf_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_ce2_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_1_ce2_local <= ap_const_logic_1;
        else 
            linebuf_1_ce2_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_1_we0_local <= ap_const_logic_1;
        else 
            linebuf_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_2_address1 <= zext_ln48_reg_661_pp0_iter8_reg(8 - 1 downto 0);
    linebuf_2_address2 <= zext_ln33_fu_376_p1(8 - 1 downto 0);

    linebuf_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_2_ce0_local <= ap_const_logic_1;
        else 
            linebuf_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_2_ce1_local <= ap_const_logic_1;
        else 
            linebuf_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_ce2_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_2_ce2_local <= ap_const_logic_1;
        else 
            linebuf_2_ce2_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_2_we0_local <= ap_const_logic_1;
        else 
            linebuf_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_address0 <= zext_ln33_reg_618_pp0_iter2_reg(8 - 1 downto 0);
    linebuf_address1 <= zext_ln48_reg_661_pp0_iter8_reg(8 - 1 downto 0);

    linebuf_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_ce0_local <= ap_const_logic_1;
        else 
            linebuf_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_ce1_local <= ap_const_logic_1;
        else 
            linebuf_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linebuf_we0_local <= ap_const_logic_1;
        else 
            linebuf_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    row_fu_352_p3 <= 
        add_ln326_fu_130 when (ap_phi_mux_icmp_ln335_phi_fu_279_p4(0) = '1') else 
        row3_fu_122;
    select_ln32_fu_344_p3 <= 
        ap_const_lv9_0 when (ap_phi_mux_icmp_ln335_phi_fu_279_p4(0) = '1') else 
        col4_fu_126;
    select_ln66_fu_561_p3 <= 
        ap_const_lv8_FF when (icmp_ln64_fu_551_p2(0) = '1') else 
        trunc_ln66_fu_557_p1;
    sub_ln57_fu_481_p2 <= std_logic_vector(unsigned(zext_ln57_fu_475_p1) - unsigned(zext_ln57_5_fu_478_p1));
    sum_1_fu_534_p3 <= 
        ap_const_lv13_0 when (tmp_2_reg_718(0) = '1') else 
        sum_fu_527_p3;
    sum_fu_527_p3 <= (trunc_ln61_reg_713 & ap_const_lv3_0);
    tmp_1_fu_386_p4 <= select_ln32_fu_344_p3(8 downto 1);
    tmp_3_fu_541_p4 <= sum_1_fu_534_p3(12 downto 8);
    tmp_fu_360_p4 <= row_fu_352_p3(8 downto 1);
    trunc_ln33_fu_382_p1 <= select_ln32_fu_344_p3(8 - 1 downto 0);
    trunc_ln61_fu_509_p1 <= add_ln61_fu_503_p2(10 - 1 downto 0);
    trunc_ln66_fu_557_p1 <= sum_1_fu_534_p3(8 - 1 downto 0);
    zext_ln33_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_344_p3),64));
    zext_ln48_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_20_fu_441_p2),64));
    zext_ln57_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(linebuf_1_load_reg_649),9));
    zext_ln57_2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(linebuf_2_load_reg_655),9));
    zext_ln57_3_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gmem0_addr_read_reg_682),10));
    zext_ln57_4_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_reg_677_pp0_iter9_reg),10));
    zext_ln57_5_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_1_reg_708),11));
    zext_ln57_6_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(linebuf_1_load_1_reg_672_pp0_iter10_reg),9));
    zext_ln57_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(linebuf_load_reg_698),11));
    zext_ln61_1_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_1_fu_493_p2),11));
    zext_ln61_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(linebuf_2_load_1_reg_703),9));
end behav;
