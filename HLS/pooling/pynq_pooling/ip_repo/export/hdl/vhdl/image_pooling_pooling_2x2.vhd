-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_pooling_pooling_2x2 is
port (
    window_0_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    window_0_1_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    window_1_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    window_1_1_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    min_val : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_val : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    window_0_0_0_0_0_0_val_ap_vld : IN STD_LOGIC;
    window_0_1_0_0_0_0_val_ap_vld : IN STD_LOGIC;
    window_1_0_0_0_0_0_val_ap_vld : IN STD_LOGIC;
    window_1_1_0_0_0_0_val_ap_vld : IN STD_LOGIC;
    max_val_ap_vld : OUT STD_LOGIC;
    min_val_ap_vld : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of image_pooling_pooling_2x2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal pooling_2x2_Block_entry_split_proc_U0_ap_start : STD_LOGIC;
    signal pooling_2x2_Block_entry_split_proc_U0_ap_done : STD_LOGIC;
    signal pooling_2x2_Block_entry_split_proc_U0_ap_continue : STD_LOGIC;
    signal pooling_2x2_Block_entry_split_proc_U0_ap_idle : STD_LOGIC;
    signal pooling_2x2_Block_entry_split_proc_U0_ap_ready : STD_LOGIC;
    signal pooling_2x2_Block_entry_split_proc_U0_max_val : STD_LOGIC_VECTOR (7 downto 0);
    signal pooling_2x2_Block_entry_split_proc_U0_max_val_ap_vld : STD_LOGIC;
    signal pooling_2x2_Block_entry_split_proc_U0_min_val : STD_LOGIC_VECTOR (7 downto 0);
    signal pooling_2x2_Block_entry_split_proc_U0_min_val_ap_vld : STD_LOGIC;

    component image_pooling_pooling_2x2_Block_entry_split_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        window_0_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        window_0_1_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        window_1_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        window_1_1_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        max_val : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_val_ap_vld : OUT STD_LOGIC;
        min_val : OUT STD_LOGIC_VECTOR (7 downto 0);
        min_val_ap_vld : OUT STD_LOGIC );
    end component;



begin
    pooling_2x2_Block_entry_split_proc_U0 : component image_pooling_pooling_2x2_Block_entry_split_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pooling_2x2_Block_entry_split_proc_U0_ap_start,
        ap_done => pooling_2x2_Block_entry_split_proc_U0_ap_done,
        ap_continue => pooling_2x2_Block_entry_split_proc_U0_ap_continue,
        ap_idle => pooling_2x2_Block_entry_split_proc_U0_ap_idle,
        ap_ready => pooling_2x2_Block_entry_split_proc_U0_ap_ready,
        window_0_0_0_0_0_0_val => window_0_0_0_0_0_0_val,
        window_0_1_0_0_0_0_val => window_0_1_0_0_0_0_val,
        window_1_0_0_0_0_0_val => window_1_0_0_0_0_0_val,
        window_1_1_0_0_0_0_val => window_1_1_0_0_0_0_val,
        max_val => pooling_2x2_Block_entry_split_proc_U0_max_val,
        max_val_ap_vld => pooling_2x2_Block_entry_split_proc_U0_max_val_ap_vld,
        min_val => pooling_2x2_Block_entry_split_proc_U0_min_val,
        min_val_ap_vld => pooling_2x2_Block_entry_split_proc_U0_min_val_ap_vld);




    ap_done <= pooling_2x2_Block_entry_split_proc_U0_ap_done;
    ap_idle <= pooling_2x2_Block_entry_split_proc_U0_ap_idle;
    ap_ready <= pooling_2x2_Block_entry_split_proc_U0_ap_ready;
    max_val <= pooling_2x2_Block_entry_split_proc_U0_max_val;
    max_val_ap_vld <= pooling_2x2_Block_entry_split_proc_U0_max_val_ap_vld;
    min_val <= pooling_2x2_Block_entry_split_proc_U0_min_val;
    min_val_ap_vld <= pooling_2x2_Block_entry_split_proc_U0_min_val_ap_vld;
    pooling_2x2_Block_entry_split_proc_U0_ap_continue <= ap_continue;
    pooling_2x2_Block_entry_split_proc_U0_ap_start <= ap_start;
end behav;
