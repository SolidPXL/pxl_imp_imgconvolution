// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="image_pooling_image_pooling,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.840000,HLS_SYN_LAT=851968,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1786,HLS_SYN_LUT=2279,HLS_VERSION=2024_1}" *)

module image_pooling (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] src;
wire   [63:0] dst_min;
wire   [63:0] dst_max;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_first_iter_0_phi_fu_265_p4;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state10;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state16;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state17;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
reg   [0:0] and_ln77_reg_687;
reg   [0:0] and_ln82_reg_716;
reg   [63:0] dst_max_read_reg_605;
reg   [63:0] dst_min_read_reg_610;
reg   [63:0] src_read_reg_615;
wire   [8:0] select_ln65_fu_344_p3;
reg   [8:0] select_ln65_reg_644;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln70_fu_352_p1;
reg   [63:0] zext_ln70_reg_649;
wire   [7:0] trunc_ln70_fu_357_p1;
reg   [7:0] trunc_ln70_reg_654;
reg   [7:0] linebuf_1_addr_reg_659;
wire   [0:0] trunc_ln77_fu_361_p1;
reg   [0:0] trunc_ln77_reg_664;
reg   [7:0] gmem_addr_read_reg_669;
reg   [7:0] linebuf_1_load_reg_675;
wire   [8:0] row_fu_371_p3;
reg   [8:0] row_reg_681;
wire    ap_CS_fsm_state11;
wire   [0:0] and_ln77_fu_383_p2;
wire   [15:0] add_ln68_1_fu_388_p2;
reg   [15:0] add_ln68_1_reg_691;
reg   [7:0] linebuf_load_reg_706;
wire    ap_CS_fsm_state12;
reg   [7:0] linebuf_1_load_1_reg_711;
wire   [0:0] and_ln82_fu_435_p2;
wire    ap_CS_fsm_state14;
wire   [31:0] out_idx_fu_446_p2;
reg   [31:0] out_idx_reg_720;
wire   [31:0] dst_col_1_fu_451_p2;
reg   [31:0] dst_col_1_reg_725;
reg   [63:0] gmem_addr_1_reg_731;
wire    ap_CS_fsm_state15;
reg   [63:0] gmem_addr_2_reg_737;
wire   [0:0] icmp_ln70_fu_528_p2;
wire   [7:0] linebuf_address0;
wire   [7:0] linebuf_address1;
wire   [7:0] linebuf_q1;
wire   [7:0] linebuf_1_q0;
wire   [7:0] linebuf_1_address1;
wire   [7:0] linebuf_1_q1;
wire   [7:0] grp_pooling_2x2_fu_286_min_val;
wire   [7:0] grp_pooling_2x2_fu_286_max_val;
wire    grp_pooling_2x2_fu_286_max_val_ap_vld;
wire    grp_pooling_2x2_fu_286_min_val_ap_vld;
wire    grp_pooling_2x2_fu_286_ap_start;
wire    grp_pooling_2x2_fu_286_ap_done;
wire    grp_pooling_2x2_fu_286_ap_ready;
wire    grp_pooling_2x2_fu_286_ap_idle;
reg    grp_pooling_2x2_fu_286_ap_continue;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
wire   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [7:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire   [10:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
reg   [0:0] first_iter_0_reg_260;
reg    ap_predicate_op139_writeresp_state23;
reg    ap_block_state23;
wire   [0:0] icmp_ln68_fu_539_p2;
reg   [0:0] icmp_ln708_reg_274;
reg    grp_pooling_2x2_fu_286_ap_start_reg;
wire    ap_CS_fsm_state13;
reg    ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready;
reg    ap_sync_reg_grp_pooling_2x2_fu_286_ap_done;
reg    ap_block_state14_on_subcall_done;
wire    ap_sync_grp_pooling_2x2_fu_286_ap_ready;
reg   [7:0] min_val_fu_144;
reg   [7:0] max_val_fu_148;
wire   [63:0] zext_ln15_fu_399_p1;
wire   [63:0] add_ln84_fu_459_p2;
wire   [63:0] add_ln85_fu_470_p2;
reg    ap_block_state2_io;
reg    ap_block_state17_io;
reg   [15:0] indvar_flatten3_fu_112;
reg   [8:0] row4_fu_116;
reg   [8:0] col5_fu_120;
wire   [8:0] col_fu_523_p2;
reg   [8:0] add_ln689_fu_124;
wire   [8:0] add_ln68_fu_534_p2;
reg   [31:0] dst_row_16_fu_128;
wire   [31:0] dst_row_fu_498_p3;
reg   [31:0] dst_col_17_fu_132;
wire   [31:0] dst_col_fu_491_p3;
reg    linebuf_1_ce0_local;
reg   [7:0] linebuf_1_address0_local;
reg    linebuf_1_we0_local;
reg    linebuf_1_ce1_local;
reg    linebuf_we0_local;
reg    linebuf_ce0_local;
reg    linebuf_ce1_local;
wire   [0:0] empty_18_fu_379_p1;
wire   [7:0] add_ln15_fu_394_p2;
wire   [24:0] tmp_fu_405_p4;
wire   [24:0] tmp_1_fu_420_p4;
wire   [0:0] icmp_ln82_fu_414_p2;
wire   [0:0] icmp_ln82_1_fu_429_p2;
wire   [31:0] shl_ln83_fu_441_p2;
wire  signed [63:0] sext_ln84_fu_456_p1;
wire   [0:0] icmp_ln88_fu_481_p2;
wire   [31:0] add_ln90_fu_486_p2;
reg   [22:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 grp_pooling_2x2_fu_286_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready = 1'b0;
#0 ap_sync_reg_grp_pooling_2x2_fu_286_ap_done = 1'b0;
#0 indvar_flatten3_fu_112 = 16'd0;
#0 row4_fu_116 = 9'd0;
#0 col5_fu_120 = 9'd0;
#0 add_ln689_fu_124 = 9'd0;
#0 dst_row_16_fu_128 = 32'd0;
#0 dst_col_17_fu_132 = 32'd0;
end

image_pooling_linebuf_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
linebuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_address0),
    .ce0(linebuf_ce0_local),
    .we0(linebuf_we0_local),
    .d0(linebuf_1_load_reg_675),
    .address1(linebuf_address1),
    .ce1(linebuf_ce1_local),
    .q1(linebuf_q1)
);

image_pooling_linebuf_1_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
linebuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_1_address0_local),
    .ce0(linebuf_1_ce0_local),
    .we0(linebuf_1_we0_local),
    .d0(gmem_addr_read_reg_669),
    .q0(linebuf_1_q0),
    .address1(linebuf_1_address1),
    .ce1(linebuf_1_ce1_local),
    .q1(linebuf_1_q1)
);

image_pooling_pooling_2x2 grp_pooling_2x2_fu_286(
    .window_0_0_0_0_0_0_val(linebuf_load_reg_706),
    .window_0_1_0_0_0_0_val(linebuf_1_load_reg_675),
    .window_1_0_0_0_0_0_val(linebuf_1_load_1_reg_711),
    .window_1_1_0_0_0_0_val(gmem_addr_read_reg_669),
    .min_val(grp_pooling_2x2_fu_286_min_val),
    .max_val(grp_pooling_2x2_fu_286_max_val),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .window_0_0_0_0_0_0_val_ap_vld(1'b1),
    .window_0_1_0_0_0_0_val_ap_vld(1'b1),
    .window_1_0_0_0_0_0_val_ap_vld(1'b1),
    .window_1_1_0_0_0_0_val_ap_vld(1'b1),
    .max_val_ap_vld(grp_pooling_2x2_fu_286_max_val_ap_vld),
    .min_val_ap_vld(grp_pooling_2x2_fu_286_min_val_ap_vld),
    .ap_start(grp_pooling_2x2_fu_286_ap_start),
    .ap_done(grp_pooling_2x2_fu_286_ap_done),
    .ap_ready(grp_pooling_2x2_fu_286_ap_ready),
    .ap_idle(grp_pooling_2x2_fu_286_ap_idle),
    .ap_continue(grp_pooling_2x2_fu_286_ap_continue)
);

image_pooling_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .src(src),
    .dst_min(dst_min),
    .dst_max(dst_max),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

image_pooling_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 11 ),
    .CH0_USER_DW( 8 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(gmem_ARVALID),
    .I_CH0_ARREADY(gmem_ARREADY),
    .I_CH0_ARADDR(src_read_reg_615),
    .I_CH0_ARLEN(gmem_ARLEN),
    .I_CH0_RVALID(gmem_RVALID),
    .I_CH0_RREADY(gmem_RREADY),
    .I_CH0_RDATA(gmem_RDATA),
    .I_CH0_RFIFONUM(gmem_RFIFONUM),
    .I_CH0_AWVALID(gmem_AWVALID),
    .I_CH0_AWREADY(gmem_AWREADY),
    .I_CH0_AWADDR(gmem_AWADDR),
    .I_CH0_AWLEN(gmem_AWLEN),
    .I_CH0_WVALID(gmem_WVALID),
    .I_CH0_WREADY(gmem_WREADY),
    .I_CH0_WDATA(gmem_WDATA),
    .I_CH0_WSTRB(1'd1),
    .I_CH0_BVALID(gmem_BVALID),
    .I_CH0_BREADY(gmem_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_pooling_2x2_fu_286_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_sync_reg_grp_pooling_2x2_fu_286_ap_done <= 1'b0;
        end else if ((grp_pooling_2x2_fu_286_ap_done == 1'b1)) begin
            ap_sync_reg_grp_pooling_2x2_fu_286_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready <= 1'b0;
        end else if ((grp_pooling_2x2_fu_286_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pooling_2x2_fu_286_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state13) | ((ap_sync_grp_pooling_2x2_fu_286_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state14)))) begin
            grp_pooling_2x2_fu_286_ap_start_reg <= 1'b1;
        end else if ((grp_pooling_2x2_fu_286_ap_ready == 1'b1)) begin
            grp_pooling_2x2_fu_286_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln689_fu_124 <= 9'd1;
    end else if (((1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        add_ln689_fu_124 <= add_ln68_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        col5_fu_120 <= 9'd0;
    end else if (((1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        col5_fu_120 <= col_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_col_17_fu_132 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dst_col_17_fu_132 <= dst_col_fu_491_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_row_16_fu_128 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dst_row_16_fu_128 <= dst_row_fu_498_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_539_p2 == 1'd0) & (1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        first_iter_0_reg_260 <= 1'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        first_iter_0_reg_260 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_539_p2 == 1'd0) & (1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        icmp_ln708_reg_274 <= icmp_ln70_fu_528_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln708_reg_274 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_fu_112 <= 16'd0;
    end else if (((1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        indvar_flatten3_fu_112 <= add_ln68_1_reg_691;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row4_fu_116 <= 9'd0;
    end else if (((1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        row4_fu_116 <= row_reg_681;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln68_1_reg_691 <= add_ln68_1_fu_388_p2;
        and_ln77_reg_687 <= and_ln77_fu_383_p2;
        row_reg_681 <= row_fu_371_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        and_ln82_reg_716 <= and_ln82_fu_435_p2;
        dst_col_1_reg_725 <= dst_col_1_fu_451_p2;
        out_idx_reg_720 <= out_idx_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dst_max_read_reg_605 <= dst_max;
        dst_min_read_reg_610 <= dst_min;
        src_read_reg_615 <= src;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        gmem_addr_1_reg_731 <= add_ln84_fu_459_p2;
        gmem_addr_2_reg_737 <= add_ln85_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        gmem_addr_read_reg_669 <= gmem_RDATA;
        linebuf_1_load_reg_675 <= linebuf_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        linebuf_1_addr_reg_659 <= zext_ln70_fu_352_p1;
        select_ln65_reg_644 <= select_ln65_fu_344_p3;
        trunc_ln70_reg_654 <= trunc_ln70_fu_357_p1;
        trunc_ln77_reg_664 <= trunc_ln77_fu_361_p1;
        zext_ln70_reg_649[8 : 0] <= zext_ln70_fu_352_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        linebuf_1_load_1_reg_711 <= linebuf_1_q1;
        linebuf_load_reg_706 <= linebuf_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_pooling_2x2_fu_286_max_val_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        max_val_fu_148 <= grp_pooling_2x2_fu_286_max_val;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_pooling_2x2_fu_286_min_val_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        min_val_fu_144 <= grp_pooling_2x2_fu_286_min_val;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state14_on_subcall_done)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state17_io)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state23)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_io)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln68_fu_539_p2 == 1'd1) & (1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_539_p2 == 1'd1) & (1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (first_iter_0_reg_260 == 1'd1))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17))) begin
        gmem_AWADDR = gmem_addr_2_reg_737;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        gmem_AWADDR = gmem_addr_1_reg_731;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state23) & (ap_predicate_op139_writeresp_state23 == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        gmem_WDATA = max_val_fu_148;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        gmem_WDATA = min_val_fu_144;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (first_iter_0_reg_260 == 1'd1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state23) & (1'd1 == and_ln82_reg_716) & (1'd1 == and_ln77_reg_687)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14))) begin
        grp_pooling_2x2_fu_286_ap_continue = 1'b1;
    end else begin
        grp_pooling_2x2_fu_286_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        linebuf_1_address0_local = linebuf_1_addr_reg_659;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        linebuf_1_address0_local = zext_ln70_fu_352_p1;
    end else begin
        linebuf_1_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        linebuf_1_ce0_local = 1'b1;
    end else begin
        linebuf_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        linebuf_1_ce1_local = 1'b1;
    end else begin
        linebuf_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        linebuf_1_we0_local = 1'b1;
    end else begin
        linebuf_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        linebuf_ce0_local = 1'b1;
    end else begin
        linebuf_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        linebuf_ce1_local = 1'b1;
    end else begin
        linebuf_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        linebuf_we0_local = 1'b1;
    end else begin
        linebuf_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_first_iter_0_phi_fu_265_p4 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (first_iter_0_reg_260 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'd0 == and_ln77_fu_383_p2) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_on_subcall_done) & (1'd0 == and_ln82_fu_435_p2) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((1'b0 == ap_block_state14_on_subcall_done) & (1'b1 == ap_CS_fsm_state14) & (1'd1 == and_ln82_fu_435_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln68_fu_539_p2 == 1'd1) & (1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln68_fu_539_p2 == 1'd0) & (1'b0 == ap_block_state23) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_394_p2 = ($signed(trunc_ln70_reg_654) + $signed(8'd255));

assign add_ln68_1_fu_388_p2 = (indvar_flatten3_fu_112 + 16'd1);

assign add_ln68_fu_534_p2 = (row_reg_681 + 9'd1);

assign add_ln84_fu_459_p2 = ($signed(sext_ln84_fu_456_p1) + $signed(dst_min_read_reg_610));

assign add_ln85_fu_470_p2 = ($signed(sext_ln84_fu_456_p1) + $signed(dst_max_read_reg_605));

assign add_ln90_fu_486_p2 = (dst_row_16_fu_128 + 32'd1);

assign and_ln77_fu_383_p2 = (trunc_ln77_reg_664 & empty_18_fu_379_p1);

assign and_ln82_fu_435_p2 = (icmp_ln82_fu_414_p2 & icmp_ln82_1_fu_429_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state14_on_subcall_done = ((ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready & ap_sync_reg_grp_pooling_2x2_fu_286_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state17_io = ((gmem_WREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state23 = ((ap_predicate_op139_writeresp_state23 == 1'b1) & (gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((gmem_ARREADY == 1'b0) & (first_iter_0_reg_260 == 1'd1));
end

assign ap_phi_mux_first_iter_0_phi_fu_265_p4 = first_iter_0_reg_260;

always @ (*) begin
    ap_predicate_op139_writeresp_state23 = ((1'd1 == and_ln82_reg_716) & (1'd1 == and_ln77_reg_687));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_pooling_2x2_fu_286_ap_ready = (grp_pooling_2x2_fu_286_ap_ready | ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready);

assign col_fu_523_p2 = (select_ln65_reg_644 + 9'd1);

assign dst_col_1_fu_451_p2 = (dst_col_17_fu_132 + 32'd1);

assign dst_col_fu_491_p3 = ((icmp_ln88_fu_481_p2[0:0] == 1'b1) ? 32'd0 : dst_col_1_reg_725);

assign dst_row_fu_498_p3 = ((icmp_ln88_fu_481_p2[0:0] == 1'b1) ? add_ln90_fu_486_p2 : dst_row_16_fu_128);

assign empty_18_fu_379_p1 = row_fu_371_p3[0:0];

assign gmem_ARLEN = 64'd65536;

assign gmem_AWLEN = 64'd1;

assign grp_pooling_2x2_fu_286_ap_start = grp_pooling_2x2_fu_286_ap_start_reg;

assign icmp_ln68_fu_539_p2 = ((indvar_flatten3_fu_112 == 16'd65535) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_528_p2 = ((col_fu_523_p2 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln82_1_fu_429_p2 = (($signed(tmp_1_fu_420_p4) < $signed(25'd1)) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_414_p2 = (($signed(tmp_fu_405_p4) < $signed(25'd1)) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_481_p2 = ((dst_col_1_reg_725 == 32'd128) ? 1'b1 : 1'b0);

assign linebuf_1_address1 = zext_ln15_fu_399_p1;

assign linebuf_address0 = zext_ln70_reg_649;

assign linebuf_address1 = zext_ln15_fu_399_p1;

assign out_idx_fu_446_p2 = (shl_ln83_fu_441_p2 + dst_col_17_fu_132);

assign row_fu_371_p3 = ((icmp_ln708_reg_274[0:0] == 1'b1) ? add_ln689_fu_124 : row4_fu_116);

assign select_ln65_fu_344_p3 = ((icmp_ln708_reg_274[0:0] == 1'b1) ? 9'd0 : col5_fu_120);

assign sext_ln84_fu_456_p1 = $signed(out_idx_reg_720);

assign shl_ln83_fu_441_p2 = dst_row_16_fu_128 << 32'd7;

assign tmp_1_fu_420_p4 = {{dst_col_17_fu_132[31:7]}};

assign tmp_fu_405_p4 = {{dst_row_16_fu_128[31:7]}};

assign trunc_ln70_fu_357_p1 = select_ln65_fu_344_p3[7:0];

assign trunc_ln77_fu_361_p1 = select_ln65_fu_344_p3[0:0];

assign zext_ln15_fu_399_p1 = add_ln15_fu_394_p2;

assign zext_ln70_fu_352_p1 = select_ln65_fu_344_p3;

always @ (posedge ap_clk) begin
    zext_ln70_reg_649[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //image_pooling
