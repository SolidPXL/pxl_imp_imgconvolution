// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module image_pooling_pooling_2x2 (
        window_0_0_0_0_0_0_val,
        window_0_1_0_0_0_0_val,
        window_1_0_0_0_0_0_val,
        window_1_1_0_0_0_0_val,
        min_val,
        max_val,
        ap_clk,
        ap_rst,
        window_0_0_0_0_0_0_val_ap_vld,
        window_0_1_0_0_0_0_val_ap_vld,
        window_1_0_0_0_0_0_val_ap_vld,
        window_1_1_0_0_0_0_val_ap_vld,
        max_val_ap_vld,
        min_val_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [7:0] window_0_0_0_0_0_0_val;
input  [7:0] window_0_1_0_0_0_0_val;
input  [7:0] window_1_0_0_0_0_0_val;
input  [7:0] window_1_1_0_0_0_0_val;
output  [7:0] min_val;
output  [7:0] max_val;
input   ap_clk;
input   ap_rst;
input   window_0_0_0_0_0_0_val_ap_vld;
input   window_0_1_0_0_0_0_val_ap_vld;
input   window_1_0_0_0_0_0_val_ap_vld;
input   window_1_1_0_0_0_0_val_ap_vld;
output   max_val_ap_vld;
output   min_val_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    pooling_2x2_Block_entry_split_proc_U0_ap_start;
wire    pooling_2x2_Block_entry_split_proc_U0_ap_done;
wire    pooling_2x2_Block_entry_split_proc_U0_ap_continue;
wire    pooling_2x2_Block_entry_split_proc_U0_ap_idle;
wire    pooling_2x2_Block_entry_split_proc_U0_ap_ready;
wire   [7:0] pooling_2x2_Block_entry_split_proc_U0_max_val;
wire    pooling_2x2_Block_entry_split_proc_U0_max_val_ap_vld;
wire   [7:0] pooling_2x2_Block_entry_split_proc_U0_min_val;
wire    pooling_2x2_Block_entry_split_proc_U0_min_val_ap_vld;

image_pooling_pooling_2x2_Block_entry_split_proc pooling_2x2_Block_entry_split_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(pooling_2x2_Block_entry_split_proc_U0_ap_start),
    .ap_done(pooling_2x2_Block_entry_split_proc_U0_ap_done),
    .ap_continue(pooling_2x2_Block_entry_split_proc_U0_ap_continue),
    .ap_idle(pooling_2x2_Block_entry_split_proc_U0_ap_idle),
    .ap_ready(pooling_2x2_Block_entry_split_proc_U0_ap_ready),
    .window_0_0_0_0_0_0_val(window_0_0_0_0_0_0_val),
    .window_0_1_0_0_0_0_val(window_0_1_0_0_0_0_val),
    .window_1_0_0_0_0_0_val(window_1_0_0_0_0_0_val),
    .window_1_1_0_0_0_0_val(window_1_1_0_0_0_0_val),
    .max_val(pooling_2x2_Block_entry_split_proc_U0_max_val),
    .max_val_ap_vld(pooling_2x2_Block_entry_split_proc_U0_max_val_ap_vld),
    .min_val(pooling_2x2_Block_entry_split_proc_U0_min_val),
    .min_val_ap_vld(pooling_2x2_Block_entry_split_proc_U0_min_val_ap_vld)
);

assign ap_done = pooling_2x2_Block_entry_split_proc_U0_ap_done;

assign ap_idle = pooling_2x2_Block_entry_split_proc_U0_ap_idle;

assign ap_ready = pooling_2x2_Block_entry_split_proc_U0_ap_ready;

assign max_val = pooling_2x2_Block_entry_split_proc_U0_max_val;

assign max_val_ap_vld = pooling_2x2_Block_entry_split_proc_U0_max_val_ap_vld;

assign min_val = pooling_2x2_Block_entry_split_proc_U0_min_val;

assign min_val_ap_vld = pooling_2x2_Block_entry_split_proc_U0_min_val_ap_vld;

assign pooling_2x2_Block_entry_split_proc_U0_ap_continue = ap_continue;

assign pooling_2x2_Block_entry_split_proc_U0_ap_start = ap_start;

endmodule //image_pooling_pooling_2x2
