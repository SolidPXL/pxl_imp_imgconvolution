// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module image_pooling_pooling_2x2_Block_entry_split_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        window_0_0_0_0_0_0_val,
        window_0_1_0_0_0_0_val,
        window_1_0_0_0_0_0_val,
        window_1_1_0_0_0_0_val,
        max_val,
        max_val_ap_vld,
        min_val,
        min_val_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] window_0_0_0_0_0_0_val;
input  [7:0] window_0_1_0_0_0_0_val;
input  [7:0] window_1_0_0_0_0_0_val;
input  [7:0] window_1_1_0_0_0_0_val;
output  [7:0] max_val;
output   max_val_ap_vld;
output  [7:0] min_val;
output   min_val_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] max_val;
reg max_val_ap_vld;
reg[7:0] min_val;
reg min_val_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] max1_fu_68_p3;
reg   [7:0] max1_reg_158;
reg    ap_block_state1;
wire   [7:0] max2_fu_88_p3;
reg   [7:0] max2_reg_164;
wire   [7:0] min1_fu_108_p3;
reg   [7:0] min1_reg_170;
wire   [7:0] min2_fu_128_p3;
reg   [7:0] min2_reg_176;
wire   [7:0] select_ln25_fu_140_p3;
reg   [7:0] max_val_preg;
wire    ap_CS_fsm_state2;
wire   [7:0] select_ln32_fu_151_p3;
reg   [7:0] min_val_preg;
wire   [0:0] icmp_ln23_fu_56_p2;
wire   [0:0] xor_ln23_fu_62_p2;
wire   [0:0] icmp_ln24_fu_76_p2;
wire   [0:0] xor_ln24_fu_82_p2;
wire   [0:0] icmp_ln30_fu_96_p2;
wire   [0:0] xor_ln30_fu_102_p2;
wire   [0:0] icmp_ln31_fu_116_p2;
wire   [0:0] xor_ln31_fu_122_p2;
wire   [0:0] icmp_ln25_fu_136_p2;
wire   [0:0] icmp_ln32_fu_147_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 max_val_preg = 8'd0;
#0 min_val_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        max_val_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            max_val_preg <= select_ln25_fu_140_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        min_val_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            min_val_preg <= select_ln32_fu_151_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        max1_reg_158 <= max1_fu_68_p3;
        max2_reg_164 <= max2_fu_88_p3;
        min1_reg_170 <= min1_fu_108_p3;
        min2_reg_176 <= min2_fu_128_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_val = select_ln25_fu_140_p3;
    end else begin
        max_val = max_val_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_val_ap_vld = 1'b1;
    end else begin
        max_val_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        min_val = select_ln32_fu_151_p3;
    end else begin
        min_val = min_val_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        min_val_ap_vld = 1'b1;
    end else begin
        min_val_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln23_fu_56_p2 = ((window_0_1_0_0_0_0_val < window_0_0_0_0_0_0_val) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_76_p2 = ((window_1_1_0_0_0_0_val < window_1_0_0_0_0_0_val) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_136_p2 = ((max1_reg_158 > max2_reg_164) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_96_p2 = ((window_0_0_0_0_0_0_val < window_0_1_0_0_0_0_val) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_116_p2 = ((window_1_0_0_0_0_0_val < window_1_1_0_0_0_0_val) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_147_p2 = ((min1_reg_170 < min2_reg_176) ? 1'b1 : 1'b0);

assign max1_fu_68_p3 = ((xor_ln23_fu_62_p2[0:0] == 1'b1) ? window_0_1_0_0_0_0_val : window_0_0_0_0_0_0_val);

assign max2_fu_88_p3 = ((xor_ln24_fu_82_p2[0:0] == 1'b1) ? window_1_1_0_0_0_0_val : window_1_0_0_0_0_0_val);

assign min1_fu_108_p3 = ((xor_ln30_fu_102_p2[0:0] == 1'b1) ? window_0_1_0_0_0_0_val : window_0_0_0_0_0_0_val);

assign min2_fu_128_p3 = ((xor_ln31_fu_122_p2[0:0] == 1'b1) ? window_1_1_0_0_0_0_val : window_1_0_0_0_0_0_val);

assign select_ln25_fu_140_p3 = ((icmp_ln25_fu_136_p2[0:0] == 1'b1) ? max1_reg_158 : max2_reg_164);

assign select_ln32_fu_151_p3 = ((icmp_ln32_fu_147_p2[0:0] == 1'b1) ? min1_reg_170 : min2_reg_176);

assign xor_ln23_fu_62_p2 = (icmp_ln23_fu_56_p2 ^ 1'd1);

assign xor_ln24_fu_82_p2 = (icmp_ln24_fu_76_p2 ^ 1'd1);

assign xor_ln30_fu_102_p2 = (icmp_ln30_fu_96_p2 ^ 1'd1);

assign xor_ln31_fu_122_p2 = (icmp_ln31_fu_116_p2 ^ 1'd1);

endmodule //image_pooling_pooling_2x2_Block_entry_split_proc
