-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_pooling is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of image_pooling is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_pooling_image_pooling,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.840000,HLS_SYN_LAT=851968,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1786,HLS_SYN_LUT=2279,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_10000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal src : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_min : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_max : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_phi_mux_first_iter_0_phi_fu_265_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal and_ln77_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln82_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_max_read_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_min_read_reg_610 : STD_LOGIC_VECTOR (63 downto 0);
    signal src_read_reg_615 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln65_fu_344_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln65_reg_644 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln70_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_649 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln70_fu_357_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln70_reg_654 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_addr_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln77_fu_361_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln77_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_load_reg_675 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_fu_371_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_reg_681 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal and_ln77_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_1_fu_388_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln68_1_reg_691 : STD_LOGIC_VECTOR (15 downto 0);
    signal linebuf_load_reg_706 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal linebuf_1_load_1_reg_711 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln82_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal out_idx_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_idx_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_col_1_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_col_1_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_731 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal gmem_addr_2_reg_737 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln70_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal linebuf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pooling_2x2_fu_286_min_val : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pooling_2x2_fu_286_max_val : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pooling_2x2_fu_286_max_val_ap_vld : STD_LOGIC;
    signal grp_pooling_2x2_fu_286_min_val_ap_vld : STD_LOGIC;
    signal grp_pooling_2x2_fu_286_ap_start : STD_LOGIC;
    signal grp_pooling_2x2_fu_286_ap_done : STD_LOGIC;
    signal grp_pooling_2x2_fu_286_ap_ready : STD_LOGIC;
    signal grp_pooling_2x2_fu_286_ap_idle : STD_LOGIC;
    signal grp_pooling_2x2_fu_286_ap_continue : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal first_iter_0_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op139_writeresp_state23 : BOOLEAN;
    signal ap_block_state23 : BOOLEAN;
    signal icmp_ln68_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln708_reg_274 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pooling_2x2_fu_286_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_pooling_2x2_fu_286_ap_done : STD_LOGIC := '0';
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_sync_grp_pooling_2x2_fu_286_ap_ready : STD_LOGIC;
    signal min_val_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_val_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln15_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln84_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln85_fu_470_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state17_io : BOOLEAN;
    signal indvar_flatten3_fu_112 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal row4_fu_116 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal col5_fu_120 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal col_fu_523_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln689_fu_124 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln68_fu_534_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal dst_row_16_fu_128 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dst_row_fu_498_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_col_17_fu_132 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dst_col_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal linebuf_1_ce0_local : STD_LOGIC;
    signal linebuf_1_address0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_1_we0_local : STD_LOGIC;
    signal linebuf_1_ce1_local : STD_LOGIC;
    signal linebuf_we0_local : STD_LOGIC;
    signal linebuf_ce0_local : STD_LOGIC;
    signal linebuf_ce1_local : STD_LOGIC;
    signal empty_18_fu_379_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_394_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_405_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_fu_420_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln82_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln83_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln84_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln88_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln90_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component image_pooling_pooling_2x2 IS
    port (
        window_0_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        window_0_1_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        window_1_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        window_1_1_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
        min_val : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_val : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        window_0_0_0_0_0_0_val_ap_vld : IN STD_LOGIC;
        window_0_1_0_0_0_0_val_ap_vld : IN STD_LOGIC;
        window_1_0_0_0_0_0_val_ap_vld : IN STD_LOGIC;
        window_1_1_0_0_0_0_val_ap_vld : IN STD_LOGIC;
        max_val_ap_vld : OUT STD_LOGIC;
        min_val_ap_vld : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component image_pooling_linebuf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component image_pooling_linebuf_1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component image_pooling_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        src : OUT STD_LOGIC_VECTOR (63 downto 0);
        dst_min : OUT STD_LOGIC_VECTOR (63 downto 0);
        dst_max : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component image_pooling_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;



begin
    linebuf_U : component image_pooling_linebuf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_address0,
        ce0 => linebuf_ce0_local,
        we0 => linebuf_we0_local,
        d0 => linebuf_1_load_reg_675,
        address1 => linebuf_address1,
        ce1 => linebuf_ce1_local,
        q1 => linebuf_q1);

    linebuf_1_U : component image_pooling_linebuf_1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linebuf_1_address0_local,
        ce0 => linebuf_1_ce0_local,
        we0 => linebuf_1_we0_local,
        d0 => gmem_addr_read_reg_669,
        q0 => linebuf_1_q0,
        address1 => linebuf_1_address1,
        ce1 => linebuf_1_ce1_local,
        q1 => linebuf_1_q1);

    grp_pooling_2x2_fu_286 : component image_pooling_pooling_2x2
    port map (
        window_0_0_0_0_0_0_val => linebuf_load_reg_706,
        window_0_1_0_0_0_0_val => linebuf_1_load_reg_675,
        window_1_0_0_0_0_0_val => linebuf_1_load_1_reg_711,
        window_1_1_0_0_0_0_val => gmem_addr_read_reg_669,
        min_val => grp_pooling_2x2_fu_286_min_val,
        max_val => grp_pooling_2x2_fu_286_max_val,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        window_0_0_0_0_0_0_val_ap_vld => ap_const_logic_1,
        window_0_1_0_0_0_0_val_ap_vld => ap_const_logic_1,
        window_1_0_0_0_0_0_val_ap_vld => ap_const_logic_1,
        window_1_1_0_0_0_0_val_ap_vld => ap_const_logic_1,
        max_val_ap_vld => grp_pooling_2x2_fu_286_max_val_ap_vld,
        min_val_ap_vld => grp_pooling_2x2_fu_286_min_val_ap_vld,
        ap_start => grp_pooling_2x2_fu_286_ap_start,
        ap_done => grp_pooling_2x2_fu_286_ap_done,
        ap_ready => grp_pooling_2x2_fu_286_ap_ready,
        ap_idle => grp_pooling_2x2_fu_286_ap_idle,
        ap_continue => grp_pooling_2x2_fu_286_ap_continue);

    control_s_axi_U : component image_pooling_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        src => src,
        dst_min => dst_min,
        dst_max => dst_max,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component image_pooling_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 8,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => gmem_ARVALID,
        I_CH0_ARREADY => gmem_ARREADY,
        I_CH0_ARADDR => src_read_reg_615,
        I_CH0_ARLEN => gmem_ARLEN,
        I_CH0_RVALID => gmem_RVALID,
        I_CH0_RREADY => gmem_RREADY,
        I_CH0_RDATA => gmem_RDATA,
        I_CH0_RFIFONUM => gmem_RFIFONUM,
        I_CH0_AWVALID => gmem_AWVALID,
        I_CH0_AWREADY => gmem_AWREADY,
        I_CH0_AWADDR => gmem_AWADDR,
        I_CH0_AWLEN => gmem_AWLEN,
        I_CH0_WVALID => gmem_WVALID,
        I_CH0_WREADY => gmem_WREADY,
        I_CH0_WDATA => gmem_WDATA,
        I_CH0_WSTRB => ap_const_lv1_1,
        I_CH0_BVALID => gmem_BVALID,
        I_CH0_BREADY => gmem_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_pooling_2x2_fu_286_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_pooling_2x2_fu_286_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_sync_reg_grp_pooling_2x2_fu_286_ap_done <= ap_const_logic_0;
                elsif ((grp_pooling_2x2_fu_286_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_pooling_2x2_fu_286_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready <= ap_const_logic_0;
                elsif ((grp_pooling_2x2_fu_286_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pooling_2x2_fu_286_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pooling_2x2_fu_286_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_sync_grp_pooling_2x2_fu_286_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
                    grp_pooling_2x2_fu_286_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pooling_2x2_fu_286_ap_ready = ap_const_logic_1)) then 
                    grp_pooling_2x2_fu_286_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add_ln689_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                add_ln689_fu_124 <= ap_const_lv9_1;
            elsif (((ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                add_ln689_fu_124 <= add_ln68_fu_534_p2;
            end if; 
        end if;
    end process;

    col5_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col5_fu_120 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                col5_fu_120 <= col_fu_523_p2;
            end if; 
        end if;
    end process;

    dst_col_17_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                dst_col_17_fu_132 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                dst_col_17_fu_132 <= dst_col_fu_491_p3;
            end if; 
        end if;
    end process;

    dst_row_16_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                dst_row_16_fu_128 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                dst_row_16_fu_128 <= dst_row_fu_498_p3;
            end if; 
        end if;
    end process;

    first_iter_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_539_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                first_iter_0_reg_260 <= ap_const_lv1_0;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                first_iter_0_reg_260 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    icmp_ln708_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_539_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                icmp_ln708_reg_274 <= icmp_ln70_fu_528_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                icmp_ln708_reg_274 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_flatten3_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten3_fu_112 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                indvar_flatten3_fu_112 <= add_ln68_1_reg_691;
            end if; 
        end if;
    end process;

    row4_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row4_fu_116 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                row4_fu_116 <= row_reg_681;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln68_1_reg_691 <= add_ln68_1_fu_388_p2;
                and_ln77_reg_687 <= and_ln77_fu_383_p2;
                row_reg_681 <= row_fu_371_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                and_ln82_reg_716 <= and_ln82_fu_435_p2;
                dst_col_1_reg_725 <= dst_col_1_fu_451_p2;
                out_idx_reg_720 <= out_idx_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                dst_max_read_reg_605 <= dst_max;
                dst_min_read_reg_610 <= dst_min;
                src_read_reg_615 <= src;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                gmem_addr_1_reg_731 <= add_ln84_fu_459_p2;
                gmem_addr_2_reg_737 <= add_ln85_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                gmem_addr_read_reg_669 <= gmem_RDATA;
                linebuf_1_load_reg_675 <= linebuf_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                linebuf_1_addr_reg_659 <= zext_ln70_fu_352_p1(8 - 1 downto 0);
                select_ln65_reg_644 <= select_ln65_fu_344_p3;
                trunc_ln70_reg_654 <= trunc_ln70_fu_357_p1;
                trunc_ln77_reg_664 <= trunc_ln77_fu_361_p1;
                    zext_ln70_reg_649(8 downto 0) <= zext_ln70_fu_352_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                linebuf_1_load_1_reg_711 <= linebuf_1_q1;
                linebuf_load_reg_706 <= linebuf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pooling_2x2_fu_286_max_val_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                max_val_fu_148 <= grp_pooling_2x2_fu_286_max_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_pooling_2x2_fu_286_min_val_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                min_val_fu_144 <= grp_pooling_2x2_fu_286_min_val;
            end if;
        end if;
    end process;
    zext_ln70_reg_649(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_phi_mux_first_iter_0_phi_fu_265_p4, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state11, and_ln77_fu_383_p2, and_ln82_fu_435_p2, ap_CS_fsm_state14, gmem_AWREADY, gmem_WREADY, gmem_RVALID, gmem_BVALID, first_iter_0_reg_260, ap_block_state23, icmp_ln68_fu_539_p2, ap_block_state14_on_subcall_done, ap_block_state2_io, ap_block_state17_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_first_iter_0_phi_fu_265_p4 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (first_iter_0_reg_260 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_lv1_0 = and_ln77_fu_383_p2) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_lv1_0 = and_ln82_fu_435_p2) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = and_ln82_fu_435_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln68_fu_539_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln68_fu_539_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln15_fu_394_p2 <= std_logic_vector(unsigned(trunc_ln70_reg_654) + unsigned(ap_const_lv8_FF));
    add_ln68_1_fu_388_p2 <= std_logic_vector(unsigned(indvar_flatten3_fu_112) + unsigned(ap_const_lv16_1));
    add_ln68_fu_534_p2 <= std_logic_vector(unsigned(row_reg_681) + unsigned(ap_const_lv9_1));
    add_ln84_fu_459_p2 <= std_logic_vector(signed(sext_ln84_fu_456_p1) + signed(dst_min_read_reg_610));
    add_ln85_fu_470_p2 <= std_logic_vector(signed(sext_ln84_fu_456_p1) + signed(dst_max_read_reg_605));
    add_ln90_fu_486_p2 <= std_logic_vector(unsigned(dst_row_16_fu_128) + unsigned(ap_const_lv32_1));
    and_ln77_fu_383_p2 <= (trunc_ln77_reg_664 and empty_18_fu_379_p1);
    and_ln82_fu_435_p2 <= (icmp_ln82_fu_414_p2 and icmp_ln82_1_fu_429_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state14_on_subcall_done)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(ap_block_state17_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state17_io)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(ap_block_state23)
    begin
        if ((ap_const_boolean_1 = ap_block_state23)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_io)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state14_on_subcall_done_assign_proc : process(ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready, ap_sync_reg_grp_pooling_2x2_fu_286_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready and ap_sync_reg_grp_pooling_2x2_fu_286_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state17_io_assign_proc : process(gmem_AWREADY, gmem_WREADY)
    begin
                ap_block_state17_io <= ((gmem_WREADY = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state23_assign_proc : process(gmem_BVALID, ap_predicate_op139_writeresp_state23)
    begin
                ap_block_state23 <= ((ap_predicate_op139_writeresp_state23 = ap_const_boolean_1) and (gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(gmem_ARREADY, first_iter_0_reg_260)
    begin
                ap_block_state2_io <= ((gmem_ARREADY = ap_const_logic_0) and (first_iter_0_reg_260 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23, ap_block_state23, icmp_ln68_fu_539_p2)
    begin
        if (((icmp_ln68_fu_539_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_first_iter_0_phi_fu_265_p4 <= first_iter_0_reg_260;

    ap_predicate_op139_writeresp_state23_assign_proc : process(and_ln77_reg_687, and_ln82_reg_716)
    begin
                ap_predicate_op139_writeresp_state23 <= ((ap_const_lv1_1 = and_ln82_reg_716) and (ap_const_lv1_1 = and_ln77_reg_687));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, ap_block_state23, icmp_ln68_fu_539_p2)
    begin
        if (((icmp_ln68_fu_539_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state23) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_pooling_2x2_fu_286_ap_ready <= (grp_pooling_2x2_fu_286_ap_ready or ap_sync_reg_grp_pooling_2x2_fu_286_ap_ready);
    col_fu_523_p2 <= std_logic_vector(unsigned(select_ln65_reg_644) + unsigned(ap_const_lv9_1));
    dst_col_1_fu_451_p2 <= std_logic_vector(unsigned(dst_col_17_fu_132) + unsigned(ap_const_lv32_1));
    dst_col_fu_491_p3 <= 
        ap_const_lv32_0 when (icmp_ln88_fu_481_p2(0) = '1') else 
        dst_col_1_reg_725;
    dst_row_fu_498_p3 <= 
        add_ln90_fu_486_p2 when (icmp_ln88_fu_481_p2(0) = '1') else 
        dst_row_16_fu_128;
    empty_18_fu_379_p1 <= row_fu_371_p3(1 - 1 downto 0);
    gmem_ARLEN <= ap_const_lv64_10000(32 - 1 downto 0);

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, first_iter_0_reg_260, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (first_iter_0_reg_260 = ap_const_lv1_1))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, gmem_addr_1_reg_731, gmem_addr_2_reg_737, gmem_AWREADY, ap_block_state17_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            gmem_AWADDR <= gmem_addr_2_reg_737;
        elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            gmem_AWADDR <= gmem_addr_1_reg_731;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    gmem_AWLEN <= ap_const_lv64_1(32 - 1 downto 0);

    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, gmem_AWREADY, ap_block_state17_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, gmem_BVALID, ap_predicate_op139_writeresp_state23, ap_block_state23)
    begin
        if ((((ap_const_boolean_0 = ap_block_state23) and (ap_predicate_op139_writeresp_state23 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state10, gmem_RVALID)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, min_val_fu_144, max_val_fu_148)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            gmem_WDATA <= max_val_fu_148;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            gmem_WDATA <= min_val_fu_144;
        else 
            gmem_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, gmem_WREADY, ap_block_state17_io)
    begin
        if ((((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_const_boolean_0 = ap_block_state17_io) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, first_iter_0_reg_260)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (first_iter_0_reg_260 = ap_const_lv1_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state22, ap_CS_fsm_state23, and_ln77_reg_687, and_ln82_reg_716)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = and_ln82_reg_716) and (ap_const_lv1_1 = and_ln77_reg_687)))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_pooling_2x2_fu_286_ap_continue_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_pooling_2x2_fu_286_ap_continue <= ap_const_logic_1;
        else 
            grp_pooling_2x2_fu_286_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_pooling_2x2_fu_286_ap_start <= grp_pooling_2x2_fu_286_ap_start_reg;
    icmp_ln68_fu_539_p2 <= "1" when (indvar_flatten3_fu_112 = ap_const_lv16_FFFF) else "0";
    icmp_ln70_fu_528_p2 <= "1" when (col_fu_523_p2 = ap_const_lv9_100) else "0";
    icmp_ln82_1_fu_429_p2 <= "1" when (signed(tmp_1_fu_420_p4) < signed(ap_const_lv25_1)) else "0";
    icmp_ln82_fu_414_p2 <= "1" when (signed(tmp_fu_405_p4) < signed(ap_const_lv25_1)) else "0";
    icmp_ln88_fu_481_p2 <= "1" when (dst_col_1_reg_725 = ap_const_lv32_80) else "0";

    linebuf_1_address0_local_assign_proc : process(ap_CS_fsm_state9, zext_ln70_fu_352_p1, linebuf_1_addr_reg_659, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            linebuf_1_address0_local <= linebuf_1_addr_reg_659;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            linebuf_1_address0_local <= zext_ln70_fu_352_p1(8 - 1 downto 0);
        else 
            linebuf_1_address0_local <= "XXXXXXXX";
        end if; 
    end process;

    linebuf_1_address1 <= zext_ln15_fu_399_p1(8 - 1 downto 0);

    linebuf_1_ce0_local_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            linebuf_1_ce0_local <= ap_const_logic_1;
        else 
            linebuf_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_ce1_local_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            linebuf_1_ce1_local <= ap_const_logic_1;
        else 
            linebuf_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_1_we0_local_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            linebuf_1_we0_local <= ap_const_logic_1;
        else 
            linebuf_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_address0 <= zext_ln70_reg_649(8 - 1 downto 0);
    linebuf_address1 <= zext_ln15_fu_399_p1(8 - 1 downto 0);

    linebuf_ce0_local_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            linebuf_ce0_local <= ap_const_logic_1;
        else 
            linebuf_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_ce1_local_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            linebuf_ce1_local <= ap_const_logic_1;
        else 
            linebuf_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_we0_local_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            linebuf_we0_local <= ap_const_logic_1;
        else 
            linebuf_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_idx_fu_446_p2 <= std_logic_vector(unsigned(shl_ln83_fu_441_p2) + unsigned(dst_col_17_fu_132));
    row_fu_371_p3 <= 
        add_ln689_fu_124 when (icmp_ln708_reg_274(0) = '1') else 
        row4_fu_116;
    select_ln65_fu_344_p3 <= 
        ap_const_lv9_0 when (icmp_ln708_reg_274(0) = '1') else 
        col5_fu_120;
        sext_ln84_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_idx_reg_720),64));

    shl_ln83_fu_441_p2 <= std_logic_vector(shift_left(unsigned(dst_row_16_fu_128),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    tmp_1_fu_420_p4 <= dst_col_17_fu_132(31 downto 7);
    tmp_fu_405_p4 <= dst_row_16_fu_128(31 downto 7);
    trunc_ln70_fu_357_p1 <= select_ln65_fu_344_p3(8 - 1 downto 0);
    trunc_ln77_fu_361_p1 <= select_ln65_fu_344_p3(1 - 1 downto 0);
    zext_ln15_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_fu_394_p2),64));
    zext_ln70_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_fu_344_p3),64));
end behav;
