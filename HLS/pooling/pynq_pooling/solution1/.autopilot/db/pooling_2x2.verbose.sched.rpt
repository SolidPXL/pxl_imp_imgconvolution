

================================================================
== Vitis HLS Report for 'pooling_2x2'
================================================================
* Date:           Wed May 14 11:16:38 2025

* Version:        2024.1 (Build 5069499 on May 21 2024)
* Project:        pynq_pooling
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  8.00 ns|  3.163 ns|     2.16 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+----------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline |
    |   min   |   max   |    min   |    max   | min | max |   Type   |
    +---------+---------+----------+----------+-----+-----+----------+
    |        1|        1|  8.000 ns|  8.000 ns|    2|    2|  dataflow|
    +---------+---------+----------+----------+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 0
* Dataflow Pipeline: 1
  DF-Pipeline-0: Size = 2, States = { 1 2 }

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.16>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "%window_1_1_0_0_0_0_val_read = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %window_1_1_0_0_0_0_val"   --->   Operation 3 'read' 'window_1_1_0_0_0_0_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%window_1_0_0_0_0_0_val_read = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %window_1_0_0_0_0_0_val"   --->   Operation 4 'read' 'window_1_0_0_0_0_0_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%window_0_1_0_0_0_0_val_read = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %window_0_1_0_0_0_0_val"   --->   Operation 5 'read' 'window_0_1_0_0_0_0_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%window_0_0_0_0_0_0_val_read = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %window_0_0_0_0_0_0_val"   --->   Operation 6 'read' 'window_0_0_0_0_0_0_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [2/2] (3.16ns)   --->   "%call_ln0 = call void @pooling_2x2_Block_entry.split_proc, i8 %window_0_0_0_0_0_0_val_read, i8 %window_0_1_0_0_0_0_val_read, i8 %window_1_0_0_0_0_0_val_read, i8 %window_1_1_0_0_0_0_val_read, i8 %max_val, i8 %min_val"   --->   Operation 7 'call' 'call_ln0' <Predicate = true> <Delay = 3.16> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 2 <SV = 1> <Delay = 3.16>
ST_2 : Operation 8 [1/1] (0.00ns)   --->   "%specdataflowpipeline_ln23 = specdataflowpipeline void @_ssdm_op_SpecDataflowPipeline, i32 4294967295, i32 0, void @empty_0" [pynq_pooling/source/pooling.cpp:23->pynq_pooling/source/pooling.cpp:40]   --->   Operation 8 'specdataflowpipeline' 'specdataflowpipeline_ln23' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 9 [1/2] (3.16ns)   --->   "%call_ln0 = call void @pooling_2x2_Block_entry.split_proc, i8 %window_0_0_0_0_0_0_val_read, i8 %window_0_1_0_0_0_0_val_read, i8 %window_1_0_0_0_0_0_val_read, i8 %window_1_1_0_0_0_0_val_read, i8 %max_val, i8 %min_val"   --->   Operation 9 'call' 'call_ln0' <Predicate = true> <Delay = 3.16> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 10 [1/1] (0.00ns)   --->   "%ret_ln42 = ret" [pynq_pooling/source/pooling.cpp:42]   --->   Operation 10 'ret' 'ret_ln42' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8.000ns, clock uncertainty: 2.160ns.

 <State 1>: 3.163ns
The critical path consists of the following:
	wire read operation ('window_1_1_0_0_0_0_val_read') on port 'window_1_1_0_0_0_0_val' [8]  (0.000 ns)
	'call' operation 0 bit ('call_ln0') to 'pooling_2x2_Block_entry.split_proc' [12]  (3.163 ns)

 <State 2>: 3.163ns
The critical path consists of the following:
	'call' operation 0 bit ('call_ln0') to 'pooling_2x2_Block_entry.split_proc' [12]  (3.163 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
