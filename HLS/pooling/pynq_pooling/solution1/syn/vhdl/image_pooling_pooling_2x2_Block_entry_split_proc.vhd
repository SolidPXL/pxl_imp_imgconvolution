-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_pooling_pooling_2x2_Block_entry_split_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    window_0_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    window_0_1_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    window_1_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    window_1_1_0_0_0_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    max_val : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_val_ap_vld : OUT STD_LOGIC;
    min_val : OUT STD_LOGIC_VECTOR (7 downto 0);
    min_val_ap_vld : OUT STD_LOGIC );
end;


architecture behav of image_pooling_pooling_2x2_Block_entry_split_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max1_fu_68_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal max1_reg_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal max2_fu_88_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal max2_reg_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal min1_fu_108_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal min1_reg_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal min2_fu_128_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal min2_reg_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln25_fu_140_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_val_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln32_fu_151_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_val_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal icmp_ln23_fu_56_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln23_fu_62_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    max_val_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                max_val_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    max_val_preg <= select_ln25_fu_140_p3;
                end if; 
            end if;
        end if;
    end process;


    min_val_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                min_val_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    min_val_preg <= select_ln32_fu_151_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                max1_reg_158 <= max1_fu_68_p3;
                max2_reg_164 <= max2_fu_88_p3;
                min1_reg_170 <= min1_fu_108_p3;
                min2_reg_176 <= min2_fu_128_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln23_fu_56_p2 <= "1" when (unsigned(window_0_1_0_0_0_0_val) < unsigned(window_0_0_0_0_0_0_val)) else "0";
    icmp_ln24_fu_76_p2 <= "1" when (unsigned(window_1_1_0_0_0_0_val) < unsigned(window_1_0_0_0_0_0_val)) else "0";
    icmp_ln25_fu_136_p2 <= "1" when (unsigned(max1_reg_158) > unsigned(max2_reg_164)) else "0";
    icmp_ln30_fu_96_p2 <= "1" when (unsigned(window_0_0_0_0_0_0_val) < unsigned(window_0_1_0_0_0_0_val)) else "0";
    icmp_ln31_fu_116_p2 <= "1" when (unsigned(window_1_0_0_0_0_0_val) < unsigned(window_1_1_0_0_0_0_val)) else "0";
    icmp_ln32_fu_147_p2 <= "1" when (unsigned(min1_reg_170) < unsigned(min2_reg_176)) else "0";
    max1_fu_68_p3 <= 
        window_0_1_0_0_0_0_val when (xor_ln23_fu_62_p2(0) = '1') else 
        window_0_0_0_0_0_0_val;
    max2_fu_88_p3 <= 
        window_1_1_0_0_0_0_val when (xor_ln24_fu_82_p2(0) = '1') else 
        window_1_0_0_0_0_0_val;

    max_val_assign_proc : process(select_ln25_fu_140_p3, max_val_preg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_val <= select_ln25_fu_140_p3;
        else 
            max_val <= max_val_preg;
        end if; 
    end process;


    max_val_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_val_ap_vld <= ap_const_logic_1;
        else 
            max_val_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    min1_fu_108_p3 <= 
        window_0_1_0_0_0_0_val when (xor_ln30_fu_102_p2(0) = '1') else 
        window_0_0_0_0_0_0_val;
    min2_fu_128_p3 <= 
        window_1_1_0_0_0_0_val when (xor_ln31_fu_122_p2(0) = '1') else 
        window_1_0_0_0_0_0_val;

    min_val_assign_proc : process(ap_CS_fsm_state2, select_ln32_fu_151_p3, min_val_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            min_val <= select_ln32_fu_151_p3;
        else 
            min_val <= min_val_preg;
        end if; 
    end process;


    min_val_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            min_val_ap_vld <= ap_const_logic_1;
        else 
            min_val_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln25_fu_140_p3 <= 
        max1_reg_158 when (icmp_ln25_fu_136_p2(0) = '1') else 
        max2_reg_164;
    select_ln32_fu_151_p3 <= 
        min1_reg_170 when (icmp_ln32_fu_147_p2(0) = '1') else 
        min2_reg_176;
    xor_ln23_fu_62_p2 <= (icmp_ln23_fu_56_p2 xor ap_const_lv1_1);
    xor_ln24_fu_82_p2 <= (icmp_ln24_fu_76_p2 xor ap_const_lv1_1);
    xor_ln30_fu_102_p2 <= (icmp_ln30_fu_96_p2 xor ap_const_lv1_1);
    xor_ln31_fu_122_p2 <= (icmp_ln31_fu_116_p2 xor ap_const_lv1_1);
end behav;
